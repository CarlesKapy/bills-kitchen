<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Chef Fundamentals</title>

  <meta name="viewport" content="width=device-width"/>

  <link rel="stylesheet" href="./css/reset.css" type="text/css"/>
  <link rel="stylesheet" href="./css/showoff.css" type="text/css"/>

  <script type="text/javascript" src="./js/jquery-1.4.2.min.js"></script>
  <script type="text/javascript" src="./js/jquery.cycle.all.js"></script>
	<script type="text/javascript" src="./js/jquery-print.js"></script>
  <script type="text/javascript" src="./js/jquery.batchImageLoad.js"></script>

  <script type="text/javascript" src="./js/jquery.doubletap-0.1.js"></script>

  <script type="text/javascript" src="./js/fg.menu.js"></script>
  <script type="text/javascript" src="./js/showoff.js"></script>
  <script type="text/javascript" src="./js/jTypeWriter.js"> </script>
  <script type="text/javascript" src="./js/sh_main.min.js"></script>
  <script type="text/javascript" src="./js/core.js"></script>
  <script type="text/javascript" src="./js/showoffcore.js"></script>
  <script type="text/javascript" src="./js/coffee-script.js"></script>

  <link type="text/css" href="./css/fg.menu.css" media="screen" rel="stylesheet" />
  <link type="text/css" href="./css/theme/ui.all.css" media="screen" rel="stylesheet" />
  <link type="text/css" href="./css/sh_style.css" rel="stylesheet" >

   <script type="text/javascript" src="./js/sh_lang/sh_ruby.min.js"></script>
   <script type="text/javascript" src="./js/sh_lang/sh_sh.min.js"></script>
   <script type="text/javascript" src="./js/sh_lang/sh_javascript.min.js"></script>

  
    <link rel="stylesheet" href="./file/base.css" type="text/css"/>
  

  
    <script type="text/javascript" src="./file/shrink.js"></script>
  

  <script type="text/javascript">
  $(function(){
      setupPreso(false, './');
  });
  </script>

</head>

<body>

<a tabindex="0" href="#search-engines" class="fg-button fg-button-icon-right ui-widget ui-state-default ui-corner-all" id="navmenu"><span class="ui-icon ui-icon-triangle-1-s"></span>slides</a>
<div id="navigation" class="hidden"></div>

<div id="help">
  <table>
    <tr><td class="key">z, ?</td><td>toggle help (this)</td></tr>
    <tr><td class="key">space, &rarr;</td><td>next slide</td></tr>
    <tr><td class="key">shift-space, &larr;</td><td>previous slide</td></tr>
    <tr><td class="key">d</td><td>toggle debug mode</td></tr>
    <tr><td class="key">## &lt;ret&gt;</td><td>go to slide #</td></tr>
    <tr><td class="key">c, t</td><td>table of contents (vi)</td></tr>
    <tr><td class="key">f</td><td>toggle footer</td></tr>
    <tr><td class="key">r</td><td>reload slides</td></tr>
    <tr><td class="key">n</td><td>toggle notes</td></tr>
    <tr><td class="key">p</td><td>run preshow</td></tr>
  </table>
</div>

<div class="buttonNav">
  <input type="submit" onClick="prevStep();" value="prev"/>
  <input type="submit" onClick="nextStep();" value="next"/>
</div>

<div id="preso">loading presentation...</div>
<div id="footer">
  <span id="slideInfo"></span>
  <span id="debugInfo"></span>
  <span id="notesInfo"></span>
</div>

<div id="slides" class="offscreen" style="display:none;">
<div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/1">
<h1>Welcome to Chef Fundamentals!</h1>

<p><center><img src="./file/introduction/../images/oc-chef-logo.png" height="394" width="500"/></center></p>

<p><center>OPS150-04.01 - January, 2012</center></p>

<p><center>Created and Sponsored by Opscode, Inc.</center></p>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode,
Inc. All rights reserved.  This work is licensed under a Creative
Commons Attribution Share Alike 3.0 United States License. To view a
copy of this license, visit
http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to
Creative Commons, 171 2nd Street, Suite 300, San Francisco,
California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/2">
<h1>Logistics</h1>

<ul>
<li>Start and finish time</li>
<li>Breaks</li>
<li>Lunch</li>
<li>Restrooms</li>
<li>Refreshments</li>
<li>Parking</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/3">
<h1>Instructor</h1>

<ul>
<li>Name</li>
<li>Company / Group</li>
<li>Experience w/ Configuration Management or Chef itself</li>
<li>Contact information</li>
</ul>

<p class="notes">Contact information should minimally include email address.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/4">
<h1>Students</h1>

<ul>
<li>Name</li>
<li>Company / Group</li>
<li>Experience w/ Configuration Management or Chef itself</li>
<li>Objective for course</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/5">
<h1>Course Objectives</h1>

<ul>
<li>Understand Chef's tools and architecture</li>
<li>Obtain, create and modify cookbooks</li>
<li>Work with the Chef Server API</li>
<li>Understand common patterns used by Opscode</li>
<li>Understand Opscode's products</li>
</ul>

<p>Chef is a complex system and we could spend 2 weeks on it and not
cover everything. This course aims to teach students the fundamentals
and most important topics, terminology and common hurdles.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/6">
<h1>Topics Not Covered</h1>

<p>We can't cover everything. Specifically, this course does not cover:</p>

<ul>
<li>Direct comparison to other tools.</li>
<li>In depth details on advanced topics.</li>
<li>Discussion of application deployment strategies.</li>
<li>Setup/management of Open Source Chef Server.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/7">
<h1>Learning Chef</h1>

<p>This course is to facilitate learning Chef.</p>

<p>We will take frequent breaks and do several hands on exercises.</p>

<p>Please keep questions on topic for the section. Some questions will
cover subject material that will be covered later.</p>

<p>Extensive or detailed questions can be answered at the end of the
relevant section, day or at the end of the course.</p>

<p class="notes">Strategies for breaks can include Pomodoros (25 mins w/ 5 min
break), or simply running through each section.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/8">
<h1>Agenda</h1>

<ul>
<li>Introduction</li>
<li>Getting Started</li>
<li>Anatomy of a Chef Run</li>
<li>Cookbooks, Recipes and Resources</li>
<li>Just Enough Ruby for Chef</li>
<li>Resources in Depth</li>
</ul>

<p class="notes">The course is taught in logical sections that follow this flow.
We introduce topics in varying degree of detail and revisit them
later. Most of the sections have hands on exercises, and we provided
systems to use.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/9">
<h1>Agenda</h1>

<ul>
<li>Troubleshooting</li>
<li>Chef Node</li>
<li>Roles</li>
<li>More Cookbooks</li>
<li>Multiple Nodes and Search</li>
<li>Additional Topics</li>
<li>Chef Development and Further Resources</li>
</ul>

<p class="notes">Additional topics include: Data bags, Environments, LWRPs,
Plugins, Reporting. This also may include questions asked during the
course that have not been covered.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/10">
<h1>Agenda: Hack Day</h1>

<p>Opscode public Chef Fundamentals training is often followed by a Hack Day.</p>

<ul>
<li>Mini-tutorials/talks</li>
<li>Demonstrations</li>
<li>Collaboration and learning</li>
<li>Hacking on Chef, cookbooks and more!</li>
<li>Venue varies by location</li>
</ul>

<p class="notes">Discuss any relevant hack day event logistics. If no hack day, skip.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/11">
<h1>Course Artifacts</h1>

<p>At the end of the class you will have:</p>

<ul>
<li>Opscode account and Opscode Hosted Chef organization (Chef Server)</li>
<li>Workstation setup to work with Opscode Hosted Chef</li>
<li>Repository that can be used to get started managing infrastructure
as code with Chef</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/12">
<h1>About Best Practices</h1>

<p>This course encompasses what we consider "best practices".</p>

<p>Many things in Chef have multiple approaches. We will focus on one,
but may mention others for awareness.</p>

<p>Best practices themselves are subjective.</p>

<p>Chef is flexible and you can make it do almost anything you want.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/13">
<h1>About the course materials</h1>

<p>Opscode's Chef Fundamentals training materials are dual-licensed.</p>

<ul>
<li>Creative Commons Attribution-ShareAlike (CC BY-SA) for slides,
guides and notes.</li>
<li>Apache License, Version 2.0 for supporting code and significant
example code on slides.</li>
</ul>

<p>GitHub Repository:</p>

<ul>
<li><a href="http://github.com/opscode/chef-fundamentals">http://github.com/opscode/chef-fundamentals</a></li>
</ul>

<p class="notes">Usually, "significant example code" is taken from source code
in Opscode open source projects such as cookbooks.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/14">
<h1>Introduction to Chef</h1>

<ul>
<li>Configuration Management</li>
<li>System Integration</li>
<li>Core Principles</li>
</ul>

<p class="notes">Take 5 if we haven't already. Now that the course is
introduced, let's introduce Chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/15">
<h1>Configuration Management</h1>

<p>"Keep track of all the stuff you do to take a system from 'bare metal'
to 'doing its job'." - Adam Jacob, Web Operations (O'Reilly, 2010)</p>

<p>This is accomplished through a variety of methods.</p>

<ul>
<li>Wiki notes, copy/paste</li>
<li>Scripting, ssh-in-a-for-loop</li>
<li>Automation frameworks</li>
</ul>

<p class="notes">Using an automated framework is why we're all here, after all.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/16">
<h1>Bare Metal</h1>

<p>We have computers sitting in a rack somewhere.</p>

<p><center><img src="./file/introduction/../images/bare-metal.png"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/17">
<h1>Bare Metal...Cloud?</h1>

<p>Or, we have an idea of what computers we need running in a cloud
somewhere.</p>

<p><center><img src="./file/introduction/../images/bare-metal-cloud.png"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/18">
<h1>Doing their Job</h1>

<p>All the configuration management has been done, now they're doing
their jobs.</p>

<p><center><img src="./file/introduction/../images/doing-their-job.png"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/19">
<h1>System Integration</h1>

<p>Systems simply running with the right software don't provide value to
the business.</p>

<p>They need to be integrated together.</p>

<ul>
<li>Load balancers connect to the right web servers.</li>
<li>Web servers hit the database or the cache layer.</li>
<li>Database servers are clustered for availability.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/20">
<h1>System Integration</h1>

<p>In a typical architecture, this is complex. For example, our six
systems talk to each other, and two of those are a complex subsystem
of their own - HA database.</p>

<p><center><img src="./file/introduction/../images/integrated-systems.png"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/21">
<h1>System Integration</h1>

<p>In modern infrastructures, applications are not simply "N-tier"
architectures anymore. Other components are added. Additional services
are required to scale or add end-user features. We already have
caching here, but wait, there's more:</p>

<ul>
<li>Message queues</li>
<li>Search engines</li>
<li>Third party services (e.g., billing, uptime/status, analytics)</li>
</ul>

<p>Don't forget monitoring and trending!</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/22">
<h1>Complexity Grows</h1>

<p><center><img src="./file/introduction/../images/complex-infrastructure.png"/>
<img src="./file/introduction/../images/third-party-services.png"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/23">
<h1>Introducing Chef</h1>

<p><center><img src="./file/introduction/../images/oc-chef-logo.png" height="394" width="500"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/24">
<h1>Chef Can Help</h1>

<p>Chef is designed to help manage this kind of complexity. You may have
met already!</p>

<ul>
<li>Configuration management tool</li>
<li>Systems integration framework</li>
<li>API for infrastructure management</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/25">
<h1>Chef: The Tool</h1>

<p>Chef is a tool for configuration management.</p>

<ul>
<li>Declarative: What, not how</li>
<li>Idempotent: Only take action if required</li>
<li>Convergent: Takes care of itself</li>
</ul>

<p class="notes">Each of these topics is discussed in greater detail.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/26">
<h1>Declarative Resources</h1>

<p>You configure systems with Chef by writing self-documenting code. This
code is lists of <em>Resources</em> that configure the system to do its job.</p>

<p>Chef manages system resources with a declarative interface that
abstracts the details.</p>

<pre class="sh_ruby"><code>package "bash" do
  action :install
end</code></pre>

<p class="notes">This is the equivalent to the command <code>apt-get install bash</code> or
<code>yum install bash</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/27">
<h1>Idempotent Actions</h1>

<p>Chef Resources have <em>Providers</em> that take idempotent action to
configure the resource, but only if it needs to change.</p>

<pre><code>INFO: Processing package[apache2] action install (apache2::default line 20)
DEBUG: package[apache2] checking package status for apache2
DEBUG: package[apache2] current version is 2.2.20-1ubuntu1.1
DEBUG: package[apache2] candidate version is 2.2.20-1ubuntu1.1
DEBUG: package[apache2] is already installed - nothing to do
</code></pre>

<p>Chef providers handle the details of checking the current state
of the resource. Different platforms may have different providers for
managing the same type of resource, yum vs apt, init vs upstart.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/28">
<h1>Convergent Nodes</h1>

<p>Chef runs on the system, configuring the <em>Node</em>. The node is the
initial unit of authority about itself.</p>

<p>The node is responsible only for itself.</p>

<p>In Chef, a single run should completely configure the system. If it
does not, it is a bug (in your code, on the system, or in Chef
itself).</p>

<p>When Chef runs, it saves the node to the Chef Server, making that
information available through a network-accessible API.</p>

<p>We'll talk more about how Chef converges the node when we cover
Anatomy of a Chef run.</p>

<p class="notes">Chef doesn't read minds, it tries to detect as much as it can
about the node.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/29">
<h1>Chef: The Framework</h1>

<p>Chef provides a framework for system integration.</p>

<ul>
<li>Resources are written in Chef Recipes, a Ruby domain-specific
language (DSL).</li>
<li>Recipe helpers such as <code>search</code> allow dynamic data usage.</li>
<li>Chef provides a library of primitives that can be used for other
purposes.</li>
</ul>

<p class="notes">Each of these topics is discussed in greater detail.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/30">
<h1>Recipe Ruby DSL</h1>

<p>Ruby is a 3rd generation interpreted programming language. Ruby has
features that make it easy to create domain specific languages. This
lends itself quite nicely to configuration management.</p>

<p>In Chef, Ruby gets out of the way, but it is still there when you need
it.</p>

<p>Chef <em>Recipes</em> are a pure Ruby domain specific language. They are
collected in <em>Cookbooks</em> along with associated components like config
files or libraries.</p>

<p class="notes">By "Gets out of the way", the DSL doesn't require intimate Ruby
knowledge.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/31">
<h1>Recipe Helpers</h1>

<p>Chef provides a number of recipe helpers to obtain and manipulate data
to use in Resources.</p>

<p><em>Search</em> is used to discover information like IP addresses about other
 systems.</p>

<p>Arbitrary data about the infrastructure can be stored in <em>Data Bags</em>
and accessed in recipes.</p>

<p>Because Chef uses Ruby, you can create your own helpers, too.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/32">
<h1>Library and Primitives</h1>

<p>Chef can be used as a library within other applications. It speaks
JSON and the server has a RESTful API accessed over HTTP(S).</p>

<p>Cookbooks can extend Chef with new libraries, including new resources
and helpers to interact with 3rd party services.</p>

<p>Chef's included tools have plugin systems you can use to extend them.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/33">
<h1>Chef: The API</h1>

<p>The Chef Server provides a network accessible API to stored data.</p>

<ul>
<li>Information about configured nodes</li>
<li>Configuration policy in Cookbooks</li>
<li>Descriptions of what policy to apply</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/34">
<h1>Node Data</h1>

<p>Chef gathers information about the node it is running on and saves
this data to the Chef Server.</p>

<p>Node data is generated as a JSON key/value structure.</p>

<p>The JSON data is indexed for search by the Chef Server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/35">
<h1>Configuration Policy</h1>

<p>Policy about the nodes is written in recipes, which are stored in
<em>Cookbooks</em>.</p>

<p>Cookbooks are uploaded to the Chef Server and distributed to the nodes
that should be configured.</p>

<p>Cookbooks have versions and dependencies, both of which affect what
code gets executed on particular nodes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/36">
<h1>Applying the Policy</h1>

<p>Tying it all together are <code>roles</code> which are descriptions of the nodes.</p>

<p>A <code>webserver</code> role contains the list of cookbooks and node-specific
information required to fulfill serving HTTP traffic.</p>

<p>The node has a list of roles and/or recipes that Chef should run to
configure the node to do its job. Chef downloads only what it needs
from the Chef Server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/37">
<h1>Chef Summary: Configuration Management</h1>

<ul>
<li>Declare configuration policy with resources</li>
<li>Collect resources into recipes</li>
<li>Package recipes and supporting code in cookbooks</li>
<li>Apply cookbooks on nodes by specific roles</li>
<li>Run Chef to configure nodes for their role</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/38">
<h1>Chef Summary: Systems Integration</h1>

<ul>
<li>Discovery through search</li>
<li>3rd generation programming language</li>
<li>Fully expressive toolbox and primitives</li>
<li>One run completely configures a single system</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="introduction/01_slide/39">
<h1>Questions</h1>

<ul>
<li>What is configuration management?</li>
<li>What is system integration?</li>
<li>What are declarative resources?</li>
<li>How are Chef resources idempotent?</li>
<li>What language are Recipes written in?</li>
<li>How are recipes distributed to nodes?</li>
<li>Student questions?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/1">
<h1>Getting Started</h1>

<p>Section Objectives</p>

<ul>
<li>Install Ruby and Chef</li>
<li>Get familiar with the tools that come with Chef</li>
<li>Set up connectivity to a Chef Server</li>
<li>Create an initial Chef Repository</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/2">
<h1>Supported Platforms</h1>

<p>Opscode supports Chef Clients on the following platforms:</p>

<ul>
<li>Ubuntu (10.04, 10.10, 11.04, 11.10)</li>
<li>Debian (5.0, 6.0)</li>
<li>RHEL &amp; CentOS (5.x, 6.x)</li>
<li>Fedora 10+</li>
<li>Mac OS X (10.4, 10.5, 10.6)</li>
<li>Windows 7</li>
<li>Windows Server 2003 R2, 2008 R2</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/3">
<h1>Additional Platforms</h1>

<p>Chef Client is known to also run on the following platforms:</p>

<ul>
<li>Ubuntu (6.06, 8.04-9.10)</li>
<li>Gentoo (11.1,11.2)</li>
<li>FreeBSD (7.1-9.0+)</li>
<li>OpenBSD (4.4+)</li>
<li>OpenSolaris (2008.11) / OpenIndiana / SmartOS</li>
<li>Solaris 5.10 (u6)</li>
<li>SuSE (11.x)</li>
<li>Windows XP, Vista</li>
</ul>

<p class="notes">Opscode does not fully test every aspect of Chef on these platforms, but Chef Client is known to run and applicable built in resources work.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/4">
<h1>Ruby and Chef</h1>

<p>Chef is written in Ruby, an interpreted object oriented programming language.</p>

<p>Much of the code you'll work with for Chef is Ruby, albeit domain-specific language(s) suited for the task.</p>

<p>In order to install and use Chef, we need to have Ruby installed and available. It is important to understand some nuances about Ruby installation, first.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/5">
<h1>Ruby Versions</h1>

<p>Ruby is an interpreted language and has several interpreter VMs available. The most common is "MRI" or the "Matz Ruby Interpreter"</p>

<p>The latest stable version of MRI is <a href="http://ruby-lang.org">Ruby 1.9.3</a>.</p>

<p>Chef requires at least Ruby 1.8.7.</p>

<p class="notes">Versions are current as of the latest update to these materials.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/6">
<h1>Platform Packages</h1>

<p>Ruby and parts of the Ruby ecosystem have a reputation for backwards incompatibility. As such, not all platforms have the latest version available as the default package for "ruby".</p>

<p>Most Linux/Unix variants package version 1.8.7; it is an API-compatible transition version between 1.8 and 1.9.</p>

<p>Some make 1.9 version(s) available, but few use it as the default version.</p>

<p class="notes">Debian (wheezy/testing) and Ubuntu (oneiric+) use their alternatives system to make ruby1.9.1 available to be used as a default ruby installed as an OS package.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/7">
<h1>RubyGems</h1>

<p>Ruby software and libraries are usually published as Gems, using the Ruby packaging system <em>RubyGems</em>. Gems are published to http://rubygems.org/</p>

<p>Prior to Ruby 1.9, RubyGems was separately installed. It has been added to Ruby 1.9 in the standard library, at RubyGems version 1.3.7.</p>

<p>Chef requires at least RubyGems 1.3.7.</p>

<p class="notes">The <code>gem_package</code> provider uses library/API calls that were introduced in RubyGems 1.3.7. Some instructions or automated installations of Chef install newer versions of RubyGems by default.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/8">
<h1>Installing Ruby and RubyGems</h1>

<p>Chef is distributed primarily as a RubyGem, therefore Ruby and RubyGems need to be installed. Assuming the version requirements are met, we can simply install the Chef gem:</p>

<pre><code>% sudo gem install chef
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/9">
<h1>Were it that simple...</h1>

<p>For some platforms, getting the required versions of Ruby and RubyGems for Chef is not trivial.</p>

<p>The current version of Ruby not being packaged by default has lead to other solutions, primarily centered around installing Ruby from source, to emerge.</p>

<p>Compiling from source is time consuming, and many (most?) system administrators prefer to install all software using packages.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/10">
<h1>Introducing Omnibus</h1>

<p>Opscode needed a better way to distribute Chef so it is easier for customers and community members to install.</p>

<p>We also need a consistent installation method that our support team can troubleshoot.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/11">
<h1>Omnibus Build System</h1>

<p>Opscode created the package build system "omnibus" to generate full-stack binary installers for Chef in a variety of formats.</p>

<ul>
<li>Native packages (rpm, deb)</li>
<li>Self-extracting executable Tar.gz</li>
<li>Microsoft Software Installer (MSI)</li>
</ul>

<p>The idea is that all the software required above the standard C library for the OS is included. In Chef's case this is autoconf, openssl, zlib, Ruby, RubyGems and more.</p>

<p class="notes">Omnibus is the name of the project for the build tool. These packages are often called "omnibus" packages. It is currently used for Chef, but can build other software stacks, too.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/12">
<h1>Installing Chef Full</h1>

<p>Omnibus is the build tool. The installation packages are called "chef-full".</p>

<p>Instructions for installation are at:</p>

<ul>
<li><a href="http://opscode.com/chef/install">http://opscode.com/chef/install</a></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/13">
<h1>Supported Platforms</h1>

<p>Installers are created for the following platforms. This may be different than the list of supported platforms, earlier.</p>

<ul>
<li>Debian, Ubuntu</li>
<li>RHEL, CentOS, Scientific Linux, Oracle Enterprise Linux</li>
<li>Fedora, Amazon Linux</li>
<li>Mac OS X</li>
<li>OpenIndiana</li>
<li>Windows (Server 2003, 2008)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/14">
<h1>Linux/Unix Installation</h1>

<p>Installation on Linux and Unix is done with a shell script:</p>

<pre><code>% curl -L http://opscode.com/chef/install.sh | sudo bash
</code></pre>

<p>The script detects the platform of the system to determine what installation file to download.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/15">
<h1>Windows Installation</h1>

<p>Installation on Windows is done by downloading the MSI and installing it.</p>

<ul>
<li><a href="http://opscode.com/chef/install.msi">http://opscode.com/chef/install.msi</a></li>
</ul>

<p>Server versions are directly tested, but the MSI is known to install and work fine on desktop versions of Windows such as Vista and 7.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/16">
<h1>What You Get: Linux/Unix</h1>

<p>Chef binaries are in <code>/opt/opscode/bin</code>. The package installation symlinks them in <code>/usr/bin</code> so they are in the default <code>$PATH</code>.</p>

<p>Other binaries are in <code>/opt/opscode/embedded/bin</code>. This includes <code>ruby</code>, <code>gem</code>, and binaries for other included software like autoconf, openssl and more.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/17">
<h1>What You Get: Windows</h1>

<p>Chef binaries are in <code>C:\opscode\bin</code>. The other binaries are in <code>C:\opscode\embedded\bin</code>.</p>

<p>These directories are both added to the system <code>%PATH%</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/18">
<h1>Chef Full Ruby</h1>

<p>The Ruby included in the Chef Full stack installation package is intended for Chef's use.</p>

<p>If Ruby is required for other tools or applications on the system, Opscode recommends installing it with a recipe.</p>

<p>If you wish to install Chef extensions such as knife plugins, report handlers or gems used in cookbooks, use the full-stack included Ruby.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/19">
<h1>Chef Toolbox</h1>

<p>Chef comes with several tools of its own.</p>

<ul>
<li>ohai</li>
<li>chef-client and chef-solo</li>
<li>knife</li>
<li>shef</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/20">
<h1>Other Tools</h1>

<p>In working with infrastructure, we have several tools in the toolbox.</p>

<p>Non-Chef tools:</p>

<ul>
<li>Shell (Bash, Zsh, Powershell, Cmd.exe)</li>
<li>Text editors (Emacs, Vim, Notepad++)</li>
<li>Version control systems (Git, Subversion, Perforce)</li>
<li>Ruby programming language</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/21">
<h1>Chef Tools</h1>

<p>Each of the tools bundled with the Chef Full package share some common traits.</p>

<ul>
<li>Built-in help</li>
<li>Configuration</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/22">
<h1>Built-in Help</h1>

<p>Each command has a <code>--help</code> or <code>-h</code> command-line option that displays options and contextual help output.</p>

<p>Each command also has a corresponding Unix <code>man(1)</code> page, which is included in the installed Chef library.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/23">
<h1>Built-in Help</h1>

<p>As Windows does not have a <code>man(1)</code> help system, HTML pages are generated. These are located in:</p>

<ul>
<li>C:\opscode\chef\embedded\lib\ruby\
gems.9.1\gems\chef-VERSION\distro\common\html</li>
</ul>

<p>Where "VERSION" is the version of Chef.</p>

<p>A future release will have helpers to make these easier to access.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/24">
<h1>Configuration</h1>

<p>Each tool that Chef comes with has its own configuration file.</p>

<p>Configuration files populate values in the <code>Chef::Config</code> object.</p>

<p>Chef comes with sane default values for all configuration options.</p>

<p>Context of the configuration file to the appropriate tool is important.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/25">
<h1>Chef Configuration</h1>

<p><code>Chef::Config</code> uses a simple domain specific language where the setting and its value are specified.</p>

<pre class="sh_ruby"><code>log_level :info
log_location STDOUT
chef_server_url "https://api.opscode.com/organizations/opstrain"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/26">
<h1>Ohai</h1>

<p>Ohai is a standalone library written by Opscode that is installed with Chef as a dependency.</p>

<p>Ohai uses plugins to profile the local system when Chef runs to gather
information.</p>

<p>When Chef runs, this data gets stored on the Chef Server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/27">
<h1>Ohai Configuration</h1>

<p>Ohai is usually configured via the chef-client configuration file
(<code>/etc/chef/client.rb</code>). It has no other configuration file.</p>

<p>The ohai configuration must be modified with <code>Ohai::Config</code>. It is a Ruby hash-like object that uses symbols for key names.</p>

<pre class="sh_ruby"><code>Ohai::Config[:disabled_plugins] &lt;&lt; 'passwd'</code></pre>

<p class="notes">Disabling plugins is the most common configuration to do for Ohai. We won't detail more configuration at this time.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/28">
<h1>Knife</h1>

<p>Knife is the "swiss army knife" of infrastructure management tools.</p>

<ul>
<li>manage the local Chef repository</li>
<li>interact with the Chef Server API</li>
<li>interact with cloud computing providers' APIs</li>
<li>extend with custom plugins/libraries</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/29">
<h1>Knife Sub-commands</h1>

<p>Knife plugins are used as sub-commands. General format of knife sub-commands:</p>

<pre><code>knife COMMAND verb noun (options)
</code></pre>

<p>This is consistent for Chef API, but some differences across other uses.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/30">
<h1>Knife Command Examples</h1>

<pre><code>knife node show NODENAME
knife cookbook upload fail2ban
knife role edit webserver
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/31">
<h1>Knife Contextual Help</h1>

<pre><code>knife --help
knife sub-command --help
knife sub-command verb --help
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/32">
<h1>Knife Man Pages</h1>

<p>Knife has built-in man pages.</p>

<pre><code>knife help
knife help list
knife help knife
knife help TOPIC
knife help node
</code></pre>

<p class="notes">These probably won't work on Windows, which doesn't have a "man" system. The files are also rendered as html and can be found in the Chef MSI.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/33">
<h1>Knife Configuration</h1>

<p>The default configuration file for Knife is <code>.chef/knife.rb</code>; knife looks for it automatically, similar to <code>git</code>:</p>

<pre><code>$PWD/.chef/knife.rb
$PWD/".."/.chef/knife.rb
~/.chef/knife.rb
</code></pre>

<p>Opscode Hosted Chef provides a pregenerated <code>knife.rb</code> you can use.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/34">
<h1>Knife Configuration Options</h1>

<p>Knife configuration uses <code>Chef::Config</code>.</p>

<p>Knife also has its own specific configuration for various plugins to
use. These are in <code>Chef::Config[:knife]</code>, which is a hash of
configuration options.</p>

<p class="notes">Configuration options in knife are like other parts of Chef,
the data is a hierarchy of key/value pairs, and where we are in the
hierarchy is context specific.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/35">
<h1>Knife Configuration</h1>

<p>To work with the Chef Server API, Knife must be configured with:</p>

<ul>
<li>The Chef Server's URL (chef_server_url).</li>
<li>The user to authenticate to the API (node_name).</li>
<li>The private key for the authenticating user (client_key).</li>
</ul>

<p class="notes">In the API, users (as knife) and API clients (like chef-client)
are "actors"</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/36">
<h1>Knife Configuration</h1>

<p>Minimal <code>knife.rb</code> configured to use a particular Opscode Hosted Chef organization and Opscode user.</p>

<pre class="sh_ruby"><code>node_name       "opscode-trainer"
client_key      "opscode-trainer.pem"
chef_server_url "https://api.opscode.com/organizations/opstrain"</code></pre>

<p class="notes">We will talk more about how the authentication system works in Chef later in Anatomy of a Chef Run</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/37">
<h1>Knife User</h1>

<p>The configuration value <code>node_name</code> in the <code>knife.rb</code> refers to an Opscode user.</p>

<p>Users are global to the entire Opscode service.</p>

<p>Users may be associated to one or more organizations.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/38">
<h1>Knife Configuration</h1>

<p>We work with a local Chef Repository that stores the various files, including cookbooks, that should be sent to the Chef Server. Knife is written to automatically use these locations.</p>

<p>One directory it does need to be told is the path where cookbooks live.</p>

<pre class="sh_ruby"><code>cookbook_path "./cookbooks"</code></pre>

<p>This configuration file is Ruby, not bash, so we need to be careful with the path usage. The default <code>knife.rb</code> provided with a Hosted Chef account through the webui will have this already set for you.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/39">
<h1>Knife Configuration</h1>

<p>The cookbook path in the pre-generated Knife configuration file uses a relative location based on the location of the <code>knife.rb</code> file.</p>

<pre class="sh_ruby"><code>current_dir = File.dirname(__FILE__)
cookbook_path ["#{current_dir}/../cookbooks"]</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/40">
<h1>Knife Command-line Options</h1>

<p>Knife has a base set of command-line options that correspond to general options in the <code>knife.rb</code>.</p>

<p>Each sub-command may have specific command-line options that are different.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/41">
<h1>Knife Command-line Options</h1>

<p>The following command-line options correspond to the config file settings seen above:</p>

<pre><code>| Command-line Option  | knife.rb        |
|----------------------|-----------------|
| -s, --server-url URL | chef_server_url |
| -k, --key KEY        | client_key      |
| -u, --user USER      | node_name       |
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/42">
<h1>Knife Command-line Options</h1>

<p>Other common command-line options used with knife.</p>

<pre><code>| Command-line Option  | Purpose             |
|----------------------|---------------------|
| -c, --config CONFIG  | Configuration file  |
|                      | to use.             |
| -V, --verbose        | Verbose output, can |
|                      | be specified twice. |
| -F, --format         | Output format, can  |
|                      | be json, yaml, text |
</code></pre>

<p class="notes">We'll discuss other options as we progress through the course.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/43">
<h1>Chef Client &amp; Chef Solo</h1>

<p>The programs <code>chef-client</code> and <code>chef-solo</code> load the Chef library and make it available to apply configuration management with Chef.</p>

<p>Both programs know how to configure the system given the appropriate recipes found in cookbooks.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/44">
<h1>Chef Client</h1>

<p>chef-client talks to a Chef Server API endpoint, authenticating with an RSA key pair. It retrieves data and code from the server to configure the node per the defined policy.</p>

<p>List of recipes can be predefined, assigned to a node on the Chef
Server, and retrieved when chef-client runs.</p>

<p>The default configuration file is <code>/etc/chef/client.rb</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/45">
<h1>Chef Client Configuration</h1>

<p>Like Knife, <code>chef-client</code> must be configured with the proper authentication information to connect to the Chef Server.</p>

<p>Unlike Knife, the <code>node_name</code> is not a user, but the actual system's name for itself. Unless otherwise specified in <code>/etc/chef/client.rb</code>, the <code>node_name</code> is the value detected by Ohai as the <code>fqdn</code> (fully qualified domain name).</p>

<p class="notes">We will talk more about authentication in Anatomy of a Chef run.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/46">
<h1>Chef Client Configuration</h1>

<p>The minimal configuration for <code>chef-client</code> in <code>/etc/chef/client.rb</code> to talk to the Chef Server:</p>

<pre class="sh_ruby"><code>chef_server_url  "https://api.opscode.com/organizations/opstrain"
validation_client_name "opstrain-validator"</code></pre>

<p>All other options will use default values, which are meant to be sane defaults.</p>

<p class="notes">"opstrain" here is the organization name, each organization will have its own value.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/47">
<h1>Chef Client Configuration</h1>

<p>Other common configuration options (default values are used below):</p>

<pre class="sh_ruby"><code>log_level        :info
log_location     STDOUT
verbose_logging  true
file_cache_path  "/var/chef/cache"
file_backup_path "/var/chef/backup"
json_attribs     nil</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/48">
<h1>Client Command-line Options</h1>

<p>The following command-line options correspond to the specified config file settings.</p>

<pre><code>| Command-line Option  | client.rb       |
|----------------------|-----------------|
| -S, --server URL     | chef_server_url |
| -k, --key KEY        | client_key      |
| -N, --node-name NAME | node_name       |
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/49">
<h1>Client Command-line Options</h1>

<p>Other common command-line options used with <code>chef-client</code>:</p>

<pre><code>| Command-line Option   | client.rb    |
|-----------------------|--------------|
| -l, --log_level LEVEL | log_level    |
| -L, --logfile LOGFILE | log_location |
| -j JSON_ATTRIBUTES    | json_attribs |
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/50">
<h1>Client Command-line Options</h1>

<p>The following options control how the <code>chef-client</code> process behaves.</p>

<pre><code>| Command-line Option   | Purpose                        |
|-----------------------|--------------------------------|
| -d, --daemonize       | Daemonize the process          |
| -i, --interval INT    | Run every INT seconds          |
| -s, --splay SECONDS   | Random splay added to interval |
| -u, --user USER       | User to run chef-client as     |
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/51">
<h1>Full example client.rb</h1>

<pre class="sh_ruby"><code>log_level        :info
log_location     STDOUT
chef_server_url  "https://api.opscode.com/organizations/ORGNAME"
validation_client_name "ORGNAME-validator"
# Using default node name</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/52">
<h1>Command-line Options Override</h1>

<p>Options passed on the command-line override values in the configuration file.</p>

<pre class="sh_sh"><code>chef-client -l debug
chef-client -N node-name
chef-client -S https://api.opscode.com/organizations/OTHER
chef-client --help</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/53">
<h1>Chef Solo</h1>

<p>chef-solo operates without a Chef Server. It requires that all the
recipes it needs are available, and that it be told what to run on the
node.</p>

<p>A JSON file is passed to chef-solo to give it these instructions in a
<code>run_list</code> for the node.</p>

<p>The default configuration file is <code>/etc/chef/solo.rb</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/54">
<h1>Solo Command-line Options</h1>

<p><code>chef-solo</code> does not connect to a server, so it doesn't have options for interacting with a server. Common command-line options:</p>

<pre><code>| Command-line Option   | solo.rb       |
|-----------------------|---------------|
| -l, --log_level LEVEL | log_level     |
| -L, --logfile LOGFILE | log_location  |
| -j JSON_ATTRIBUTES    | json_attribs  |
| -N, --node-name NAME  | node_name     |
| -r, --recipe-url URL  | recipe_url    |
</code></pre>

<p>These are similar to <code>chef-client</code>, with the addition of <code>-r</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/55">
<h1>Shef</h1>

<p>Shef is an interactive Ruby console that supports attribute and recipe contexts, as well as interactive debugging features.</p>

<p>Shef can be configured to talk to a Chef Server to interact with the API directly.</p>

<p>In depth use of Shef is beyond the scope of this class, but we may explore it for examples later.</p>

<p>The default configuration file is <code>~/.chef/shef.rb</code> but an alternate can be passed with <code>-c</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/56">
<h1>Chef Server</h1>

<p>The Chef Server is a centralized publishing system for infrastructure data and code.</p>

<ul>
<li>Stores node, role and user-entered data</li>
<li>Data is indexed for search</li>
<li>Stores cookbooks</li>
<li>Provides an API for management and discovery</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/57">
<h1>Chef Server API Implementations</h1>

<p>Opscode Hosted Chef</p>

<p>Opscode Private Chef</p>

<p>Open Source Chef Server</p>

<p>Commis (Python)</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/58">
<h1>Chef Server Components</h1>

<p><center><img src="./file/getting-started/../images/chef-server-arch.png"/></center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/59">
<h1>Chef Server API Services</h1>

<p>API Server (HTTP &amp; JSON, Authentication)</p>

<p>Data storage (JSON documents, Cookbooks)</p>

<p>Message queue (Search indexing, other services)</p>

<p>Search Engine (Full text search)</p>

<p>Web management console (API client)</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/60">
<h1>Chef Server Security</h1>

<p>All communication is initiated by API clients, and never from the Chef Server directly.</p>

<p>Communication is over HTTP. Opscode Hosted Chef and Opscode Private Chef use HTTPS.</p>

<p>All API requests are authenticated using digital signatures.</p>

<p>All API requests for Opscode Hosted Chef and Opscode Private Chef are authorized with role-based access controls.</p>

<p>Custom data ("data bags") can be encrypted with user-supplied keys.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/61">
<h1>Chef Server</h1>

<p>We will use Opscode Hosted Chef as the Chef Server for this course.</p>

<ul>
<li>It is free up to 5 nodes.</li>
<li>It is internet-accessible.</li>
<li>No additional software to install/configure.</li>
</ul>

<p class="notes">We will set up access to Opscode Hosted Chef during the exercise, and walk through the steps briefly next.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/62">
<h1>Sign up for Hosted Chef</h1>

<p>Go to http://opscode.com</p>

<p><center><img src="./file/getting-started/../images/hosted-chef-signup.png" height="371" width="625"/></center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/63">
<h1>Free Up to 5 Nodes</h1>

<p><center><img src="./file/getting-started/../images/5-free-nodes.png"/></center>

<p class="notes">Opscode Hosted Chef is free up to 5 nodes, and we'll use less than that for the class.</p>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/64">
<h1>Sign up for Hosted Chef</h1>

<p><center><img src="./file/getting-started/../images/free-trial.png"/></center>

<p class="notes">Select the free trial button to get the signup form.</p>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/65">
<h1>About You</h1>

<p>Organization short name:</p>

<ul>
<li>Alphanumeric</li>
<li>Hyphen and underscore</li>
</ul>

<p><center><img src="./file/getting-started/../images/signup-about.png"/></center>

<p class="notes">Fill out accurate information. To get support, we need valid contact information on file. The organization shortname should be lowercase letters and numbers. It can include hyphen and underscore.</p>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/66">
<h1>Next Steps</h1>

<p>Verify your email address.</p>

<p><center><img src="./file/getting-started/../images/next-steps.png"/></center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/67">
<h1>Next Steps</h1>

<p>Select "Experienced with Chef" to go to the Management Console.</p>

<p><center><img src="./file/getting-started/../images/email-verified.png"/></center>
</p>
</div>
</div><div class="slide" data-transition="none">
  <div class="content" ref="getting-started/01_slide/68">
<h1>Download Organization Assets</h1>

<p>Login: https://manage.opscode.com</p>

<p><center><img src="./file/getting-started/../images/select-organizations.png"/>
<center><img src="./file/getting-started/../images/generate-validation-key.png"/>
<center><img src="./file/getting-started/../images/generate-knife-config.png"/></center>

<p>Download the validation key and knife config to somewhere such as ~/Downloads.</p>
</center>
</center>
</p></div>
</div><div class="slide" data-transition="none">
  <div class="content" ref="getting-started/01_slide/69">
<h1>Download User Private key</h1>

<p>Select your username at the top of the management console to access your profile page.</p>

<p><center><img src="./file/getting-started/../images/manage-console-user-login.png"/>
<center><img src="./file/getting-started/../images/user-get-private-key.png"/></center>

<p class="notes">Click your username in the upper right corner. Then get the
private key for your user. Save this in the same directory as the
organization validation key and the knife configuration file.</p>
</center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/70">
<h1>Sign-up Results</h1>

<ul>
<li>Opscode Hosted Chef Login</li>
<li>Opscode Hosted Chef Organization</li>
<li>User private key</li>
<li>Validation or Organization key</li>
<li>Knife Configuration file</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/71">
<h1>Chef Repository</h1>

<p>Very simply, the Chef Repository is a version controlled directory that contains cookbooks and other components relevant to Chef.</p>

<p>It contains your "Infrastructure as Code".</p>

<p>Knife already knows how to interact with many parts of the repository.</p>

<p>We'll look at each part of the repository in greater detail when we get to the relevant section.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/72">
<h1>Chef Repository</h1>

<p>Example Chef Repository directory tree:</p>

<pre><code>chef-repo
&#x251C;&#x2500;&#x2500; .chef
&#x251C;&#x2500;&#x2500; cookbooks
&#x251C;&#x2500;&#x2500; data_bags
&#x251C;&#x2500;&#x2500; environments
&#x251C;&#x2500;&#x2500; README.md
&#x2514;&#x2500;&#x2500; roles
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/73">
<h1>Working with Chef</h1>

<p><center><img src="./file/getting-started/../images/working-with-chef.png"/></center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/74">
<h1>Summary</h1>

<ul>
<li>Ruby and Chef Installation</li>
<li>Tools and commands that come with Chef</li>
<li>Connectivity to the Chef Server</li>
<li>Components of a Chef Repository</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/75">
<h1>Questions</h1>

<ul>
<li>In what language is Chef written?</li>
<li>How is Chef distributed by Opscode?</li>
<li>What are commands / tools that come with Chef?</li>
<li>What do Chef's commands have in common?</li>
<li>What are two implementations of the Chef Server API?</li>
<li>What configuration is required to connect to a Chef Server?</li>
<li>Student questions?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/76">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Resources</li>
<li>http://wiki.opscode.com/display/chef/Recipes</li>
<li>http://wiki.opscode.com/display/chef/Chef+Repository</li>
<li>http://wiki.opscode.com/display/chef/Chef+Configuration+Settings</li>
<li>http://wiki.opscode.com/display/chef/Server+API</li>
<li>http://community.opscode.com/cookbooks</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="getting-started/01_slide/77">
<h1>Lab Exercise</h1>

<p>Getting Started</p>

<ul>
<li>Install Ruby and Chef</li>
<li>Get familiar with the tools that come with Chef</li>
<li>Set up connectivity to a Chef Server</li>
<li>Create an initial Chef Repository</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/1">
<h1>Anatomy of a Chef Run</h1>

<p>Section Objectives:</p>

<ul>
<li>Chef API Clients</li>
<li>Chef Nodes</li>
<li>Node convergence phases</li>
<li>Notification handler types</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/2">
<h1>Anatomy of a Chef Run</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/anatomy-of-chef-run-0.png" width="424" height="624"/></center></p>

<p class="notes">This diagram represents the process of running chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/3">
<h1>Anatomy of a Chef Run</h1>

<ul>
<li>Build the node</li>
<li>Synchronize cookbooks</li>
<li>Compile resource collection</li>
<li>Configure the node</li>
<li>Run notification handlers</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/4">
<h1>Build the Node</h1>

<p>Before anything else happens, the system is profiled with Ohai.</p>

<p>Chef will use the detected fully qualified domain name (fqdn) for the node's name unless it was specified:</p>

<ul>
<li><code>node_name</code> in <code>/etc/chef/client.rb</code></li>
<li><code>chef-client -N</code></li>
</ul>

<p>Node names should be unique, they are used for the managed node and the API client.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/5">
<h1>API Clients</h1>

<p><em>API Clients</em> authenticate with the Chef Server.</p>

<p>Chef uses Signed Header Authentication across all API requests.</p>

<p>The API requests are authenticated using the <code>node_name</code> for the API
client. The timestamp is recorded in the headers to prevent replay attacks.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/6">
<h1>API Authentication</h1>

<p>Does <code>/etc/chef/client.pem</code> exist?</p>

<ul>
<li>Use it to sign requests</li>
</ul>

<p>Does <code>/etc/chef/validation.pem</code> exist?</p>

<ul>
<li>Request a new API client key</li>
<li>Or fail</li>
</ul>

<p>Was a new client key generated?</p>

<ul>
<li>Use it to sign requests</li>
</ul>

<p class="notes">Consider role-play scenario of someone trying to get into an
exclusive, hip-hoppin' club</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/7">
<h1>API Authentication Process</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/authn-flow.png" height="454" width="879"/></center></p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/8">
<h1>Users are Special API Clients</h1>

<p>With Opscode Hosted Chef, people authenticate as <em>Users</em>, which are
special API clients since they're global.</p>

<p>Users are associated with an <em>Organization</em>.</p>

<p>What a user can do is determined by the access control lists in the
organization and by granting of certain group-based privileges.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/9">
<h1>Node Objects</h1>

<p>After the client has authenticated with the Server, Chef retrieves the node object from the server.</p>

<p>Node objects represent a set of data called attributes and a list of
configuration to apply called a run list.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/10">
<h1>Node Object</h1>

<p><code>Chef::Node</code> is the node object. It looks and almost behaves like a hash, except when it doesn't.</p>

<p>Nodes have attributes at varying priority levels (automatic, default, normal, override).</p>

<p>Nodes have a run list.</p>

<p>Nodes have an environment.</p>

<p class="notes">We talk about the internals of the Node object later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/11">
<h1>Node Object: JSON</h1>

<pre class="sh_javascript"><code>{
  "name": "www1.example.com",
  "json_class": "Chef::Node",
  "chef_type": "node",
  "chef_environment": "_default",
  "automatic": { ... },
  "default": { ... },
  "normal": { ... },
  "override": { ... },
  "run_list": [ ... ]
}</code></pre>

<p class="notes">Name is the fqdn by default, JSON class is used internally, chef type tells the server how to index this object, environment specifies the environment, automatic-override are attribute levels, run list is an array</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/12">
<h1>Node Run List Expands</h1>

<p>The run list can contain recipes and roles. Roles can contain recipes and also other roles.</p>

<p>Chef expands the node's run list down to the recipes. The roles and recipes get set to node attributes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/13">
<h1>Anatomy of a Chef Run</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/anatomy-of-chef-run-2.png" width="424" height="624"/></center></p>

<p class="notes">This diagram represents the process of running chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/14">
<h1>Synchronize Cookbooks</h1>

<p>Chef downloads from the Chef Server all the cookbooks that appear as
recipes in the node's expanded run list.</p>

<p>Chef also downloads all cookbooks that are listed as dependencies
which might not appear in the run list.</p>

<p>If the node's <code>chef_environment</code> specifies cookbook versions, the Chef
downloads the version specified. Otherwise the latest available
version is downloaded.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/15">
<h1>Cookbook Metadata</h1>

<p>If a recipe from another cookbook is included in a recipe, it isn't
automatically downloaded.</p>

<p>Some cookbooks don't actually have recipes, and instead provide helper
code, libraries or other assets we want to use.</p>

<p>To ensure the node has components from other cookbooks used in
recipes, we declare explicit dependencies in cookbook metadata.</p>

<p>For example, if we want to re-use a template from the <code>apache2</code>
cookbook in the <code>webserver</code> cookboook, declare a dependency on the
<code>apache2</code> cookbook.</p>

<pre class="sh_ruby"><code># in webserver/metadata.rb...
depends "apache2"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/16">
<h1>Cookbook Cache</h1>

<p>Cookbooks are stored on the local system in the directory configured by "<code>file_cache_path</code>". The default is <code>/var/chef/cache</code> unless changed in <code>/etc/chef/client.rb</code>.</p>

<p>Cookbooks that have not changed are not downloaded again, the cached copy will be used.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/17">
<h1>Chef Run</h1>

<p>This starts when you see:</p>

<pre><code>INFO: Starting Chef Run for NODE_NAME
</code></pre>

<p>The run context is created with the node and the cookbook collection.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/18">
<h1>Load Cookbooks</h1>

<p>Once the cookbooks are synchronized to the local system, their components are loaded in the following order:</p>

<ul>
<li>Libraries</li>
<li>Providers</li>
<li>Resources</li>
<li>Attributes</li>
<li>Definitions</li>
<li>Recipes (in the order specified)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/19">
<h1>Anatomy of a Chef Run</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/anatomy-of-chef-run-3.png" width="424" height="624"/></center></p>

<p class="notes">This diagram represents the process of running chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/20">
<h1>Cookbook Files and Templates</h1>

<p>Cookbook static assets (files) and dynamic assets (templates) are not retrieved or loaded at this time.</p>

<p>They are retrieved from the server and rendered when needed by a resource in a recipe.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/21">
<h1>Node Convergence</h1>

<p>Convergence is when the configuration management system brings the
node into compliance with policy.</p>

<p>In other words, the node is configured based on the roles and recipes
in its run list.</p>

<p>Convergence in Chef happens in two phases.</p>

<ul>
<li>Compile</li>
<li>Execute</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/22">
<h1>Convergence: Compile</h1>

<p>Chef recipes are written in Ruby. During the compile phase, the Chef
Recipe DSL is processed for Chef <em>Resources</em> to be configured.</p>

<p>During the processing of recipes:</p>

<ul>
<li>Ruby code is executed directly</li>
<li>Recognized resources are added to the <em>Resource Collection</em></li>
</ul>

<p>For example:</p>

<pre class="sh_ruby"><code>pkg = "apache2"

package pkg do
  action :install
end</code></pre>

<p class="notes">Local variables are used, arrays are iterated, conditionals are
evaluated, etc.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/23">
<h1>Convergence: Execute</h1>

<p>Chef walks the Resource Collection in order.</p>

<ul>
<li>Chef runs the specified actions for each resource</li>
<li>Providers know how to perform the actions</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/24">
<h1>Anatomy of a Chef Run</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/anatomy-of-chef-run-4.png" width="424" height="624"/></center></p>

<p class="notes">This diagram represents the process of running chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/25">
<h1>Report and Exception Handlers</h1>

<p>At the end of the Chef Run, report and exception handlers are triggered.</p>

<ul>
<li>Report handlers run when Chef exits cleanly</li>
<li>Exception handlers run when Chef exits abnormally with an unhandled exception.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/26">
<h1>Report Handlers</h1>

<p>Normal, clean exit:</p>

<pre><code>INFO: Chef Run complete in 42.72288 seconds
INFO: Running report handlers
INFO: Report handlers complete
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/27">
<h1>Exception Handlers</h1>

<p>Abnormal exit from unhandled exception:</p>

<pre><code>^CFATAL: SIGINT received, stopping
FATAL: SIGINT received, stopping
ERROR: Running exception handlers
ERROR: Exception handlers complete
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/28">
<h1>Anatomy of a Chef Run</h1>

<p><center><img src="./file/anatomy-of-a-chef-run/../images/anatomy-of-chef-run-5.png" width="424" height="624"/></center></p>

<p class="notes">This diagram represents the process of running chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/29">
<h1>Summary</h1>

<ul>
<li>Chef API Clients</li>
<li>Chef Nodes</li>
<li>Node convergence phases</li>
<li>Notification handler types</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/30">
<h1>Questions</h1>

<ul>
<li>What is an API client?</li>
<li>How does the API client get created automatically?</li>
<li>How is an API client different from a node?</li>
<li>What are the two main components of a node object?</li>
<li>How does Chef determine what cookbooks to download?</li>
<li>Where do cookbooks get downloaded?</li>
<li>What are the two phases of node convergence and how do they differ?</li>
<li>What is the difference between a report and exception handler?</li>
<li>Student questions?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/31">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run</li>
<li>http://wiki.opscode.com/display/chef/Authentication</li>
<li>http://wiki.opscode.com/display/chef/Chef+Client</li>
<li>http://wiki.opscode.com/display/chef/Nodes</li>
<li>http://wiki.opscode.com/display/chef/Attributes</li>
<li>http://wiki.opscode.com/display/chef/Evaluate+and+Run+Resources+at+Compile+Time</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="anatomy-of-a-chef-run/01_slide/32">
<h1>Lab Exercise</h1>

<p>Anatomy of a Chef Run</p>

<ul>
<li>Configure remote target to run <code>chef-client</code></li>
<li>Successful <code>chef-client</code> run with debug logging</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/1">
<h1>Cookbooks, Recipes, Resources</h1>

<p>Section Objectives:</p>

<ul>
<li>Components of Chef cookbooks</li>
<li>Create new cookbooks</li>
<li>Write simple recipes</li>
<li>Recognize and write Chef resources</li>
<li>Run Chef with a cookbook on a node</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/2">
<h1>Cookbooks Overview</h1>

<p>Cookbooks are the fundamental units of file distribution in Chef. They
are "packages" for Chef recipes and other helper components.</p>

<p>They are designed to be sharable packages for managing infrastructure
as code. Cookbooks can be shared within an organization, or with the
Chef Community.</p>

<p>Nodes managed by Chef download cookbooks from the Chef Server to apply
their configuration.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/3">
<h1>Cookbook Basics</h1>

<p><center><img src="./file/cookbooks-recipes-resources/../images/chef-basics-cookbook.png"/></center>
</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/4">
<h1>Creating Cookbooks</h1>

<p>Cookbooks are merely a structured set of directories in your Chef Repository.</p>

<p>Create a new cookbook in the <code>cookbooks</code> directory. The content of the
recipe and metadata.rb don't matter right now, they just need to
exist.</p>

<pre><code>mkdir cookbooks/webserver
mkdir cookbooks/webserver/recipes
touch cookbooks/webserver/recipes/default.rb
touch cookbooks/webserver/metadata.rb
</code></pre>

<p class="notes">It is worth noting that the metadata OR recipes can be absent,
but not both. The cookbook must have one or the other for knife to
upload it.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/5">
<h1>Cookbook Components</h1>

<p>The most commonly used cookbook components are:</p>

<ul>
<li>recipes</li>
<li>metadata</li>
<li>assets (files and templates)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/6">
<h1>Common Components: Metadata</h1>

<p>Chef Cookbook <em>Metadata</em> is written using a Ruby domain-specific
language.</p>

<p>Metadata serves two purposes.</p>

<ul>
<li>Documentation</li>
<li>Dependency management</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/7">
<h1>Metadata Documentation</h1>

<p>Cookbook metadata contains documentation about the cookbook itself.</p>

<pre><code>maintainer       "Opscode, Inc."
maintainer_email "cookbooks@opscode.com"
license          "apachev2"
description      "Configures web servers"
long_description "Configures web servers with a cool recipe"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/8">
<h1>Metadata Dependency Management</h1>

<p>Metadata is also used for dependency management.</p>

<p>Cookbooks are like OS packages in that they can be interrelated. You
can use parts of one cookbook in another.</p>

<p>Cookbook dependencies are assumed when using part(s) of one cookbook
in another, such as including a recipe, or re-using a template.</p>

<p>Cookbook dependencies are explicitly defined in metadata with the
<code>depends</code> field.</p>

<p class="notes">Chef is not a mind-reader.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/9">
<h1>Metadata Version Management</h1>

<p>Related to dependency management is version management. Cookbooks can
be versioned, and dependencies on versions can be declared.</p>

<p>Cookbook versioning is enforced with dependencies if used, and in Chef
Environments.</p>

<p>Specify a cookbook's version with the <code>version</code> field. It should be a
quoted string in the form "X.Y.Z", e.g., "1.0.0" or "0.5.2".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/10">
<h1>Cookbook Dependencies</h1>

<p>The metadata defines the additional cookbooks required that might not
appear in the run list explicitly.</p>

<p>When cookbooks are uploaded, the Ruby code is parsed by Knife and
translated to JSON when it is stored on the Chef Server.</p>

<p>This is a security feature, so the Chef Server does not execute
user-defined Ruby code.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/11">
<h1>Common Components: Assets</h1>

<p>One of the most common things to manage with Chef are configuration
files on the node's filesystem.</p>

<ul>
<li><code>/etc/mysql/my.cnf</code></li>
<li><code>/var/www/.htaccess</code></li>
<li><code>C:\Program Files\My Application\Configuration.ini</code></li>
</ul>

<p>Chef cookbooks can contain <code>files</code> and/or <code>templates</code> directories to
contain the source files for these resources as we'll see later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/12">
<h1>Common Components: Recipes</h1>

<p><em>Recipes</em> are the work unit in Chef. They contain lists of resources
 that should be configured on the node to put it in the desired state
 to fulfill its job.</p>

<p>Nodes have a run list, which is simply a list of the recipes that
should be applied when Chef runs.</p>

<p>The node will download all the cookbooks that appear in its run list.</p>

<p class="notes">We're not talking about roles yet, just recipes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/13">
<h1>Chef Recipes</h1>

<p>Recipes contain lists of resources.</p>

<p>Resources are declarative abstract interfaces to OS resources like
packages, services, config files and users.</p>

<p>Information about the node itself is available via the <code>node</code> object.</p>

<p class="notes">We will discuss the node object in greater detail later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/14">
<h1>Chef Recipes</h1>

<p>Recipes are an internal Ruby domain-specific language (DSL).</p>

<ul>
<li>You need a 3rd generation programming language.</li>
<li>You can't be limited by the language.</li>
</ul>

<p class="notes">We will cover basics of Ruby in greater detail in a later
section, "Just Enough Ruby for Chef"</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/15">
<h1>How Are Recipes Applied?</h1>

<p>Nodes have a list of recipes they will run.</p>

<p>This run list can include recipes that also include other recipes.</p>

<p>These are applied to the node in the order listed.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/16">
<h1>Chef Recipes</h1>

<p>Recipes are processed in the order they are written.</p>

<ul>
<li>Ruby code is evaluated.</li>
<li>Ruby recognized as Resources are added to the resource collection.</li>
<li>Chef walks the resource collection to configure the resources.</li>
<li>Providers take action to configure the resource as it was declared.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/17">
<h1>Resources</h1>

<p>Resources are the fundamental configuration object.</p>

<p>Chef manages system resources on the node so it can be configured to do its job.</p>

<ul>
<li>The apache2 package should be installed.</li>
<li>The application user should be created.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/18">
<h1>Resources</h1>

<p>Resources abstract the details of how to configure the system. The commands:</p>

<pre class="sh_sh"><code>apt-get install apache2
useradd application</code></pre>

<p>Become Chef resources:</p>

<pre class="sh_ruby"><code>package "apache2"
user "application"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/19">
<h1>Resources</h1>

<p>Resources take idempotent actions through <em>Providers</em>.</p>

<p>Providers know how to determine the current state of the resource on the node.</p>

<p>Providers do not take action if the resource is in the declared state.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/20">
<h1>Resources Chef Can Configure</h1>

<ul>
<li>directories, files, templates, remote files</li>
<li>packages, services, users, groups</li>
<li>scripts, commands, ruby code blocks</li>
<li>subversion and git code repositories</li>
<li>application deployment, HTTP requests</li>
<li>network interfaces, filesystem mounts</li>
</ul>

<p>Chef includes over 25 different kinds of resources.</p>

<p class="notes">we will cover resources in depth later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/21">
<h1>Resource Components</h1>

<ul>
<li>Resources have a type</li>
<li>Resources have a name</li>
<li>Resources take parameter attributes</li>
<li>Resources specify the action to take</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/22">
<h1>Example Resources</h1>

<pre class="sh_ruby"><code>directory "/etc/thing" do
  owner "root"
  group "root"
end

template "/etc/thing/config.conf" do
  source "config.conf.erb"
  owner "root"
  group "root"
  mode 0644
  action :create
end</code></pre>

<p class="notes">in the absense of parameters, default values are assumed. same
with actions</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/23">
<h1>Sane Default for Resources</h1>

<p>Each resource has a "name attribute."</p>

<p>This corresponds to a parameter attribute as the default value.</p>

<p>Parameter attributes all have default values internal to Chef. Specify
your own to be explicit, or to change the default.</p>

<p>Resources also have a default action. The default value depends on the
resource type.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/24">
<h1>Resource Attributes</h1>

<p>Resources are data driven through their parameter attributes.</p>

<ul>
<li>Packages have versions</li>
<li>Users have home directories, shells and numeric IDs.</li>
</ul>

<p>This data can come from multiple sources, either by writing in the
code itself or an external source.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/25">
<h1>Distributing Cookbooks</h1>

<p>Cookbooks are packages of source code and they can be distributed all
over the place.</p>

<ul>
<li>With version control</li>
<li>With nodes to be configured</li>
<li>With the Community</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/26">
<h1>Version Control</h1>

<p>Use a version control system for your Chef Repository where the
cookbooks are stored.</p>

<p>Community best practice is Git. However, other DVCS are common. Use
the preferred tool for your organization.</p>

<p>It is beyond the scope of this course to discuss version control
strategies in depth.</p>

<p>Storing a cookbook in version control does not make it available to
Chef. It must be uploaded to the Chef Server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/27">
<h1>Nodes and Chef Server</h1>

<p>In order for nodes to be configured with Chef, the cookbooks they need
must be uploaded to the Chef Server.</p>

<pre><code>knife cookbook upload COOKBOOK
</code></pre>

<p class="notes">Chef Server uses an API for uploading cookbooks</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/28">
<h1>Applying Cookbooks</h1>

<p>To run a recipe on a node with Chef, add the recipe to the node's run
list.</p>

<p>Recipes are stored in cookbook directories, and namespaced by the
cookbook's directory name.</p>

<p>The cookbook and recipe names can contain alpha-numeric characters,
including dash and underscore.</p>

<p>Recipes are stored in Ruby files, with the extension <code>.rb</code>. The <code>.rb</code>
is ommitted when adding a recipe to a node.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/29">
<h1>Add Recipe to a Node</h1>

<p>When adding a recipe to a node, combine the cookbook name and the
recipe name with <code>::</code>. If the <code>default</code> recipe is used, it is
optional.</p>

<pre><code>recipe[webserver]
recipe[webserver::default]
</code></pre>

<p>Are equivalent. To use a different recipe, specify it by name:</p>

<pre><code>recipe[webserver::different-recipe]
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/30">
<h1>Add Recipe to a Node</h1>

<p>Use knife to add a recipe to an existing node's run list on the Chef
Server.</p>

<pre><code>knife node run list add NODE 'recipe[webserver]'
</code></pre>

<p>Use quotes to prevent shell meta-character expansion.</p>

<p>Run Chef on the node and it will apply the recipe.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/31">
<h1>Add Recipe to a Node</h1>

<p>If the node does not exist on the Chef Server already, the run list
can be specified by passing a JSON file with <code>chef-client -j
FILE.json</code>.</p>

<pre class="sh_javascript"><code>{
  "run_list": [
    "recipe[webserver]"
  ]
}</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/32">
<h1>Chef Community Cookbooks</h1>

<p>Opscode hosts the Chef Community site where Chef users share
cookbooks:</p>

<ul>
<li><a href="http://community.opscode.com/">http://community.opscode.com/</a></li>
</ul>

<p>Knife includes sub-commands for working with the site.</p>

<pre><code>knife cookbook site --help
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/33">
<h1>Summary</h1>

<ul>
<li>Components of Chef cookbooks</li>
<li>Create new cookbooks</li>
<li>Write simple recipes</li>
<li>Recognize and write Chef resources</li>
<li>Run Chef with a cookbook on a node</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/34">
<h1>Questions</h1>

<ul>
<li>What are Chef cookbooks?</li>
<li>What do cookbooks contain?</li>
<li>Which part of a cookbook determines the version and how to handle
dependencies?</li>
<li>What two kinds of assets are distributed in cookbooks?</li>
<li>How do recipes get applied to a node?</li>
<li>What are the four components of a resource?</li>
<li>How does Chef determine the order to configure resources?</li>
<li>Student questions?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/35">
<h1>Additional Resources</h1>

<ul>
<li><a href="http://wiki.opscode.com/display/chef/Cookbooks">http://wiki.opscode.com/display/chef/Cookbooks</a></li>
<li><a href="http://wiki.opscode.com/display/chef/Recipes">http://wiki.opscode.com/display/chef/Recipes</a></li>
<li><a href="http://wiki.opscode.com/display/chef/Resources">http://wiki.opscode.com/display/chef/Resources</a></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="cookbooks-recipes-resources/01_slide/36">
<h1>Lab Exercise</h1>

<p>Cookbooks, Recipes and Resources</p>

<ul>
<li>Create a new cookbook</li>
<li>Write a simple recipe with two resources</li>
<li>Run Chef with the cookbook on a node</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/1">
<h1>Just Enough Ruby For Chef</h1>

<p>Section Objectives:</p>

<ul>
<li>Learn where Ruby is installed</li>
<li>Understand basic Ruby data types</li>
<li>Understand some of the common Ruby objects used in Chef</li>
<li>Familiarity with the ways Chef uses Ruby for DSLs</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/2">
<h1>What is Ruby?</h1>

<p>Ruby is an object oriented programming language.</p>

<p>The most common implementation is MRI, Matz Ruby Interpreter, named
after the language's inventor.</p>

<p>This section does not comprehensively cover Ruby. It will familiarize
you with the syntax and idioms used by Chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/3">
<h1>How does Chef Use Ruby?</h1>

<p>Chef uses Ruby to construct "Domain Specific Languages" that are used
for managing infrastructure.</p>

<ul>
<li>Recipes</li>
<li>Roles</li>
<li>Metadata</li>
<li>Plugins (knife, ohai)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/4">
<h1>Where is Ruby Installed?</h1>

<p>When installing Chef with the full-stack installer, Ruby is installed
as well. The binaries for Ruby (mainly <code>ruby</code> and <code>irb</code>) are included
in the package.</p>

<p>On Unix/Linux systems:</p>

<ul>
<li><code>/opt/opscode/embedded/bin</code></li>
</ul>

<p>On Windows systems:</p>

<ul>
<li><code>C:\opscode\embedded\bin</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/5">
<h1>Variables</h1>

<p>Ruby can assign local variables to various built-in Ruby data types,
or from other expressions. Variable names start with a letter and can
contain alphanumeric characters and underscore.</p>

<pre class="sh_ruby"><code>my_number = 3
floating_point = 3.14159
a_string = "I like Chef!"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/6">
<h1>Ruby Data Types</h1>

<ul>
<li>Strings</li>
<li>Numbers</li>
<li>Arrays</li>
<li>Hashes</li>
<li>Symbols</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/7">
<h1>Strings</h1>

<p>Strings are bytes of characters enclosed in quotes, either double or
single. Strings in double quotes allow further substition than single
quoted strings.</p>

<p>Strings are the most common Ruby data type used in Chef.</p>

<pre class="sh_ruby"><code>"This is a string."
'This is another string.'</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/8">
<h1>Code Substitution</h1>

<p>Within a string, code can be substituted with the <code>#{}</code> notation.</p>

<pre class="sh_ruby"><code>code_sub = "code substitution"
"This is a string with #{code_sub}"</code></pre>

<p>This is often done in Chef to use node attributes:</p>

<pre class="sh_ruby"><code>"#{node['my_package']['dir']}/my_package.conf"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/9">
<h1>Numbers</h1>

<p>Ruby supports integers an floating point numbers.</p>

<pre class="sh_ruby"><code>cpus = 2
mem_in_gb = 3.14159</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/10">
<h1>Arrays</h1>

<p>Ruby <em>Arrays</em> are lists of elements. They are ordered by insertion and
each element can be any kind of Ruby object, including numbers,
strings, other arrays, hashes and more.</p>

<p>Use square brackets to enclose arrays.</p>

<pre class="sh_ruby"><code>[ "apache", "mysql", "php" ]
[ 80, 443, 8080 ]</code></pre>

<p>We can use the <code>%w{}</code> shortcut to write array of strings without the
quotes and commas.</p>

<pre class="sh_ruby"><code>%w{ apache mysql php }</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/11">
<h1>Hashes</h1>

<p>Ruby <em>Hashes</em> are key/value pairs. The key can be a <code>"string"</code> or
<code>:symbol</code>. The value can be any Ruby object, including numbers,
strings, arrays, hashes and more. Specify values for each key with
<code>=&gt;</code>, and separate them with comma.</p>

<p>Use curly braces to enclose hash key/value pairs.</p>

<pre class="sh_ruby"><code>{
  "site" =&gt; "opscode.com",
  "ports" =&gt; [ 80, 443 ]
}</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/12">
<h1>Symbols</h1>

<p>Ruby has a special data type called symbols. They are specified by
prefixing a string with a colon.</p>

<pre class="sh_ruby"><code>:thing</code></pre>

<p>Symbols are commonly used as hash keys instead of strings because they
are often more memory efficient.</p>

<pre class="sh_ruby"><code>{
  :site =&gt; "opscode.com",
  :ports =&gt; [ 80, 443 ]
}</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/13">
<h1>True, False and Nil</h1>

<p>In Ruby, only <code>nil</code> and <code>false</code> are false.</p>

<pre class="sh_ruby"><code>true            # =&gt; true
false           # =&gt; false
nil             # =&gt; nil
0               # =&gt; 0 ( 0 is the integer 0, not false )</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/14">
<h1>Conditionals</h1>

<p>Ruby supports common types of logic conditionals.</p>

<ul>
<li>if/else</li>
<li>unless</li>
<li>case</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/15">
<h1>If/Else and Unless</h1>

<p>Just like other languages, if, else and unless statements test boolean
values of true or false.</p>

<pre class="sh_ruby"><code>if node['platform'] == "ubuntu"
  # do ubuntu things
end

unless node['platform'] == "ubuntu"
  # don't do ubuntu things
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/16">
<h1>Case</h1>

<p>Case statements can be used as well.</p>

<pre class="sh_ruby"><code>case node['platform']
when "debian", "ubuntu"
  package "apache2"
when "centos", "redhat"
  package "httpd"
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/17">
<h1>Methods</h1>

<p>Ruby methods are called on an object with the dot-notation.</p>

<pre class="sh_ruby"><code>"I like Chef".gsub(/like/, "love") # =&gt; "I love Chef"
FileTest.exists?("/etc/passwd")    # =&gt; true
1.even?                            # =&gt; false
2.even?                            # =&gt; true</code></pre>

<p>Ruby has a special method available called <code>method_missing</code>. It is
called when a method is not found for the object. Most of the DSLs in
Chef are written using <code>method_missing</code>.</p>

<p class="notes">We will see the actual DSLs in their relevant sections.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/18">
<h1>Blocks</h1>

<p>Ruby blocks are code statements between braces or a do/end pair.</p>

<pre class="sh_ruby"><code>my_array.each {|i| puts i}
my_array.each do |i|
  puts i
end</code></pre>

<p>Common convention is to use braces for a single line, and do/end for multiple lines.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/19">
<h1>Enumerables</h1>

<p>Array and Hash mix-in the Enumerable class. It contains a number
of helper methods, such as <code>.each</code> or <code>.map</code> that are particularly
useful in Chef.</p>

<pre class="sh_ruby"><code>%w{ apache mysql php }.each do |pkg|
  package pkg do
    action :upgrade
  end
end</code></pre>

<p>We do this often in Chef to handle creating the same kind of resource
without having to type the resource multiple times.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/20">
<h1>Where does Chef use Ruby?</h1>

<p>Chef uses Ruby for a number of Domain Specific Languages.</p>

<ul>
<li>Recipes</li>
<li>Roles</li>
<li>Cookbook Metadata</li>
<li>Environments</li>
</ul>

<p class="notes">This is an overview, not a comprehensive section on these
topics, they have their own corresponding sections.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/21">
<h1>Chef Ruby Objects</h1>

<p>We use a number of Chef's Ruby objects within Recipes. The three most
common objects are:</p>

<ul>
<li><code>Chef::Node</code>, via <code>node</code></li>
<li><code>Chef::Config</code>, a hash-like structure containing configuration.</li>
<li><code>Chef::Log</code>, send log messages</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/22">
<h1>Chef::Node</h1>

<p>The <code>node</code> object is available anywhere Ruby is used. Attributes are
accessed like Ruby hash keys:</p>

<pre class="sh_ruby"><code>node['platform']
node['fqdn']
node['kernel']['release']</code></pre>

<p>Some parts of the node object are accessed with method calls.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/23">
<h1>Chef::Config</h1>

<p>The <code>Chef::Config</code> object is available within recipes so behavior can
be modified depending on how Chef itself is configured.</p>

<p>Commonly, we use <code>Chef::Config[:file_cache_path]</code> as a "temporary"
location to download files such as software tarballs.</p>

<pre class="sh_ruby"><code>remote_file "#{Chef::Config[:file_cache_path]}/mystuff.tar.gz" do
  source "http://example.com/mystuff.tar.gz"
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/24">
<h1>Chef::Config</h1>

<p>Since <code>chef-solo</code> behaves differently, it may be desirable to account
for it in recipes, particularly those that use Chef Server-specific
features such as search.</p>

<p>The value <code>Chef::Config[:solo]</code> will only be true if Chef was invoked
with <code>chef-solo</code>.</p>

<pre class="sh_ruby"><code>unless Chef::Config[:solo] # if we're not using solo...
  results = search(:node, "role:webserver") # perform search
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/25">
<h1>Chef::Log</h1>

<p>Log messages using Chef's logger can be displayed with <code>Chef::Log</code>.
The different levels of log output are specified by calling the
appropriate method.</p>

<pre><code>Chef::Log.info("INFO level message")
Chef::Log.debug("DEBUG level message")
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/26">
<h1>Summary</h1>

<ul>
<li>Learn where Ruby is installed</li>
<li>Understand basic Ruby data types</li>
<li>Understand some of the common Ruby objects used in Chef</li>
<li>Familiarity with the ways Chef uses Ruby for DSLs</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="just-enough-ruby-for-chef/01_slide/27">
<h1>Additional Resources</h1>

<p>The primary site for Ruby is maintained by the Ruby Community:</p>

<ul>
<li>http://ruby-lang.org</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/1">
<h1>Resources In Depth</h1>

<p>Section Objectives:</p>

<ul>
<li>Understand the components of resources.</li>
<li>Write recipes using common resources.</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/2">
<h1>Special Exercise format</h1>

<p>This unit has a special exercise format. We will use <code>shef</code> to
interactively write resources and observe the results.</p>

<p>Not all resources in the examples will work exactly as written. The
goal is to understand the syntax and how Chef processes the resource,
not to configure specific things on the system.</p>

<p>Students should be logged into the provided remote target instance
rather than their local workstation. <code>shef</code> should be started as a
privileged user (e.g., <code>sudo shef</code>).</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/3">
<h1>Shef</h1>

<p><code>shef</code>, the Chef Shell (or Console) operates under different execution
contexts and the prompt indicates the context.</p>

<p>Shef starts in the "main" context. The prompt will look like this:</p>

<pre><code>chef &gt;
</code></pre>

<p>This is where general Chef Server API calls can be made through
Shef-defined methods.</p>

<p>The <code>help</code> command is available in all contexts and displays the
built-in commands available.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/4">
<h1>Shef</h1>

<p>Two other contexts are available.</p>

<p><code>attributes</code> is the context of editing a "cookbook attributes" file.</p>

<pre><code>chef &gt; attributes
chef:attributes &gt;
</code></pre>

<p><code>recipes</code> is the context of the Chef Recipe DSL.</p>

<pre><code>chef &gt; recipe
chef:recipe &gt;
</code></pre>

<p>We are going to write resources using the Recipe DSL, so ensure you
are in the recipe context.</p>

<p class="notes">Using the recipe context allows direct demonstration of the
"compile" vs "execute" phases of node convergence. We're not actually
doing the "execute" part in these demonstrations.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/5">
<h1>Chef Resources</h1>

<p>Chef Resources have four components.</p>

<ul>
<li>Type</li>
<li>Name</li>
<li>Parameters/attributes</li>
<li>Action</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/6">
<h1>Chef Resource</h1>

<p>Syntax example of Chef Resources:</p>

<pre class="sh_ruby"><code>type "name"

type "name" do
  parameter "value"
  parameter 0
  action :action
end</code></pre>

<p>The values of parameters can be various Ruby data type objects
depending on the specific resource. If parameters are not specified,
Chef will use its default value.</p>

<p>The action, if specified, <strong>must</strong> begin with a colon (Ruby symbol).</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/7">
<h1>Shef Simple Example</h1>

<pre><code>chef:recipe &gt; file "/tmp/foo"
=&gt; &lt;file[/tmp/foo] @name: "/tmp/foo" @noop: nil @before: nil @params:
{} @provider: nil @allowed_actions:
[:nothing, :create, :delete, :touch, :create_if_missing] @action:
"create" @updated: false @updated_by_last_action: false @supports:
{} @ignore_failure: false @retries: 0 @retry_delay: 2
@immediate_notifications: [] @delayed_notifications: []
@source_line: "(irb#1):1:in `irb_binding'" @resource_name: :file
@path: "/tmp/foo" @backup: 5 @cookbook_name: nil @recipe_name: nil
@enclosing_provider: nil&gt;
</code></pre>

<p class="notes">We will come back to this very shortly.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/8">
<h1>Common Resources</h1>

<p>By the 80/20 rule, you'll use a small subset of the available Chef
resources most of the time.</p>

<ul>
<li>File management</li>
<li>Packages</li>
<li>Users and Groups</li>
<li>Services/daemons</li>
<li>Executable programs</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/9">
<h1>File management</h1>

<p>Configuration management often entails writing configuration files, so
Chef has a number of built-in resources to manage files.</p>

<ul>
<li><code>file</code></li>
<li><code>cookbook_file</code></li>
<li><code>remote_file</code></li>
<li><code>template</code></li>
<li><code>link</code></li>
<li><code>directory</code></li>
<li><code>remote_directory</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/10">
<h1>Content Idempotence</h1>

<p>When managing file contents, Chef uses SHA-256 checksums on the target
file content to determine if a file should be updated. If the checksum
of the content matches, Chef makes no further changes.</p>

<p><code>file</code> (with <code>content</code> parameter), <code>cookbook_file</code>, <code>remote_file</code> and
<code>template</code> resources all use checksums.</p>

<p class="notes">SHA-256 was chosen because no known collisions have been found. MD5
has known published collision attacks, as does SHA-0. SHA-1 has
theoretical collisions found.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/11">
<h1>file</h1>

<p>The <code>file</code> resource is the basis for other "file" resources:</p>

<ul>
<li><code>cookbook_file</code></li>
<li><code>remote_file</code></li>
<li><code>template</code></li>
</ul>

<p>The "name attribute" for all file resources is the target file path on
the system, e.g. "<code>/etc/passwd</code>."</p>

<p>The default action is to create the file.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/12">
<h1>file example</h1>

<p>Type this into your Shef session (recipe context):</p>

<pre class="sh_ruby"><code>file "/etc/passwd" do
  owner "root"
  group "root"
  mode 0644
end</code></pre>

<ul>
<li>path - name attribute, target file path on the system</li>
<li>owner - user that should own the file, default is user running chef</li>
<li>group - group that should own the file, default is group running chef</li>
<li>mode - octal mode of the file, specify as a number with a leading 0,
or as a string, default is the umask of the chef process</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/13">
<h1>file parameters</h1>

<ul>
<li>content - a string to write to the file, overwrites existing content</li>
<li>backup - number of backups to keep, default is 5</li>
</ul>

<p class="notes">the "content" parameter is useful to copy the content of one
file to another as well, in an idempotent fashion.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/14">
<h1>cookbook_file</h1>

<p>Use <code>cookbook_file</code> to transfer files from the cookbook to the node.</p>

<ul>
<li>static configuration files</li>
<li>small binary files</li>
<li>inherits from <code>file</code>, so permission parameters can be used.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/15">
<h1>cookbook_file example</h1>

<pre class="sh_ruby"><code>cookbook_file "/usr/local/bin/cpan_install" do
  source "cpan_install"
  mode 0755
end</code></pre>

<ul>
<li>source - the file name to transfer, located in the <code>files/default</code>
directory of the cookbook</li>
<li>cookbook - <em>optional</em> a different cookbook where the file is</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/16">
<h1>remote_file</h1>

<p>Use <code>remote_file</code> to download a file from a remote URL, rather than
using, e.g., <code>wget</code>.</p>

<p>Remote files are retrieved from the source URI, which can be anything
but most often an "<code>http://</code>" or "<code>ftp://</code>" URL.</p>

<p>The default action is to create the target file by downloading the
source URI.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/17">
<h1>remote_file example</h1>

<pre class="sh_ruby"><code>remote_file "/tmp/chef-install.sh" do
  source "http://opscode.com/chef/install.sh"
  mode 0755
  checksum "3dd0daa5"
end</code></pre>

<ul>
<li>path - name attribute, the target file to write</li>
<li>source - the URI of the file to download</li>
<li>mode, owner, group - inherited from <code>file</code></li>
<li>checksum - a portion or all of the SHA-256 checksum of the file</li>
</ul>

<p class="notes"><code>remote_file</code> is not idempotent unless you give it a checksum, or
otherwise guard the resource. We'll talk about ways to do that later
on (<code>not_if</code>/<code>only_if</code>)</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/18">
<h1>remote_file download location</h1>

<p>It is common to download files to a temporary location, such as
<code>/tmp</code>. However, some distributions or platforms will remove this on
reboot. Thus <code>/var/tmp</code> may be desirable, but various system policies
define particular characteristics about the <code>/var</code> filesystem.</p>

<p>In Chef, it is common practice to use the location where Chef caches
cookbooks and other files as the download location.</p>

<pre class="sh_ruby"><code>remote_file "#{Chef::Config[:file_cache_path]}/install.sh" do
  source "http://opscode.com/chef/install.sh"
end</code></pre>

<p class="notes">It is not required to type all this resource in since we used a
similar one previously.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/19">
<h1>template</h1>

<p>Create dynamically rendered configuration files with ERb templates and
the <code>template</code> resource.</p>

<p>This is the most common resource for configuration files.</p>

<p>The entire Chef <code>node</code> object is available. Additional variables can
be passed into the template as a parameter.</p>

<p>The default action will create the target file rendered from the
template.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/20">
<h1>template example</h1>

<pre class="sh_ruby"><code>template "/var/www/index.html" do
  source "index.html.erb"
  variables :welcome =&gt; "&lt;h1&gt;It works!&lt;/h1&gt;"
end</code></pre>

<ul>
<li>path - the name attribute, target path to the file to render</li>
<li>mode, owner, group - inherited from <code>file</code></li>
<li>source - the erb file in the <code>templates/default</code> directory to use</li>
<li>cookbook - <em>optional</em> another cookbook where the template is</li>
<li>variables - a hash of variables to pass into the template, which
must be specified using Ruby symbols as keys</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/21">
<h1>ERb syntax</h1>

<p>Access node attributes:</p>

<pre><code>&lt;%= node['ipaddress'] %&gt;
&lt;%= node['fqdn'] %&gt;
&lt;%= node['ec2']['public_hostname'] %&gt;
</code></pre>

<p>Access <code>variables</code> parameter:</p>

<pre><code>&lt;%= @welcome %&gt;
</code></pre>

<p>Use Ruby code, e.g. conditionals:</p>

<pre><code>&lt;% if node['platform'] =~ /debian/ -%&gt;
I'm on Debian.
&lt;% end -%&gt;
</code></pre>

<p class="notes">Do not type this into Shef, as it will do us no good.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/22">
<h1>Data driven configuration</h1>

<p>Templates are dynamically rendered from node data and the variables
parameter.</p>

<p>Common use cases:</p>

<ul>
<li>Service configuration for <em>this</em> node's IP address (<code>node['ipaddress']</code>)</li>
<li>Determine particular configuration values based on the node's
platform (<code>node['platform']</code>)</li>
<li>Service configuration to connect to another node's IP address (via a
search)</li>
</ul>

<p class="notes">We will cover search and how do go about this in a later section.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/23">
<h1>link</h1>

<p>Manage hard or symbolic links with the <code>link</code> resource.</p>

<p>The default action is to create the link.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/24">
<h1>link example</h1>

<p>The equivalent of running <code>ln -s /etc/hosts /tmp/hosts</code>:</p>

<pre class="sh_ruby"><code>link "/tmp/hosts" do
  to "/etc/hosts"
end</code></pre>

<ul>
<li>target_file - the file name of the link</li>
<li>to - the real target file</li>
<li>type - <code>:hard</code> or <code>:symbolic</code> (must be a Ruby symbol)</li>
</ul>

<p class="notes">Say, "You link the target file to a thing that already exists"</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/25">
<h1>directory</h1>

<p>Create a directory with the <code>directory</code> resource. It is the basis for
the <code>remote_directory</code> resource as well.</p>

<p>Like <code>file</code>, the "name attribute" for directories is the path to the
target directory.</p>

<p>The default action is to create the specified directory.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/26">
<h1>directory example</h1>

<pre class="sh_ruby"><code>directory "/var/cache/chef" do
  mode 0755
end

directory "/var/www/sites/mysite" do
  owner "www-data"
  recursive true
end</code></pre>

<ul>
<li>path - name attribute, the target path of the directory</li>
<li>mode, owner, group - work like the <code>file</code> resource (but directory
does not inherit from <code>file</code>)</li>
<li>recursive - recursively create the directory tree, like <code>mkdir -p</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/27">
<h1>remote_directory</h1>

<p>Transfers a directory of files from the cookbook's <code>files/default</code>
directory.</p>

<p>The files copied can have their own file permissions set as part of
the resource.</p>

<p>The default action is to create the directory.</p>

<p class="notes"><code>remote_directory</code> is not the most efficient method to copy
files, but it can be done in place of a better solution such as
"rsync" or "bittorrent"; for bittorrent, perhaps suggest transmission
cookbook.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/28">
<h1>remote_directory example</h1>

<pre class="sh_ruby"><code>remote_directory "/var/www/sites/mysite" do
  source "my_app"
  owner "www-data"
  files_owner "my-app"
  files_group "www-data"
  recursive true
end</code></pre>

<ul>
<li>source - the directory name in <code>files/default</code> in the cookbook</li>
<li>cookbook - optionally specify a different cookbook</li>
<li>files_owner - set the owner of the individual files</li>
<li>files_group - set the group of the individual files</li>
<li>recursive - this will create the directory structure for the target</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/29">
<h1>Packages</h1>

<p>Package management is typically handled by the configuration
management system to ensure that the state of the system has the
correct software installed.</p>

<p>Packages are installed using the default package management system
chosen by platform using the <code>package</code> resource.</p>

<p>One of the keys to cross-platform support in Chef is having package
management providers for various platforms.</p>

<p>The default action is to install the named package.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/30">
<h1>package examples</h1>

<pre class="sh_ruby"><code>package "apache2"

package "apache2" do
  version "2.2.14-5ubuntu8.7"
end</code></pre>

<ul>
<li>package_name - name attribute, name of the package</li>
<li>version - specific version to install, uses the latest version
detected by the provider (e.g., apt cache or yum repo data)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/31">
<h1>Additional package examples</h1>

<pre class="sh_ruby"><code>package "apache2" do
  package_name "httpd"
end

package "apache2" do
  action :upgrade
end

package "portmap" do
  action :remove
end</code></pre>

<p class="notes">Be aware of removing packages that have dependencies, as Chef
may not be able to determine all the correct dependency resolution on
its own and other "package removal" resources may be required.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/32">
<h1>Package Providers</h1>

<p>Chef supports many package management systems. The default is
determined by the node's platform:</p>

<ul>
<li><code>apt_package</code> - Debian/Ubuntu</li>
<li><code>yum_package</code> - RHEL/CentOS/Fedora/Amazon</li>
<li><code>macports_package</code> - Mac OS X</li>
<li><code>freebsd_package</code> - FreeBSD (ports system)</li>
<li><code>pacman_package</code> - Archlinux</li>
<li><code>portage_package</code> - Gentoo</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/33">
<h1>Package Providers</h1>

<ul>
<li><code>dpkg_package</code> - install a .deb</li>
<li><code>rpm_package</code> - install a .rpm</li>
<li><code>gem_package</code> - RubyGems</li>
<li><code>easy_install_package</code> - Python easy-install</li>
</ul>

<p class="notes">dpkg requires that the file is downloaded to the local system.
rpm can retrieve over HTTP just like the rpm command, but it will not
follow redirects properly; e.g., EPEL RPMs.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/34">
<h1>Cookbook Package Resources</h1>

<ul>
<li><code>homebrew_package</code> - homebrew cookbook, sets OS X default provider
to <a href="http://mxcl.github.com/homebrew/">homebrew</a>.</li>
<li><code>dmg_package</code> - dmg cookbook, for OS X</li>
<li><code>pacman_aur</code>, <code>pacman_group</code> - pacman cookbook, for Archlinux</li>
<li><code>python_pip</code> - python cookbook, use pip instead of <code>easy-install</code></li>
<li><code>windows_package</code> - windows cookbook, for Windows systems</li>
</ul>

<p>Complete list provided by Opscode published cookbooks:
<a href="http://wiki.opscode.com/display/chef/Opscode+LWRP+Resources">http://wiki.opscode.com/display/chef/Opscode+LWRP+Resources</a></p>

<p>Download cookbooks from http://community.opscode.com/cookbooks</p>

<p class="notes">Trying to find cookbooks for these things on GitHub is prone to
confusion. Use the Community site.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/35">
<h1>Users and Groups</h1>

<p>Local system groups and users can be managed with the <code>group</code> and
<code>user</code> resources.</p>

<ul>
<li><code>group</code></li>
<li><code>user</code></li>
</ul>

<p>The commands to manage groups and users vary by platform, so there are
different providers.</p>

<p>The default action for both resources is to create the named group or user.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/36">
<h1>group example</h1>

<pre class="sh_ruby"><code>group "admins" do
  gid 999
  members ['joe', 'alice']
end</code></pre>

<ul>
<li>gid - the numeric group id</li>
<li>members - the list of users that should be members of the group</li>
<li>append - the members will be appended to an existing group</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/37">
<h1>user example</h1>

<pre class="sh_ruby"><code>user "joe" do
  comment "Joe User"
  shell "/bin/bash"
  home "/home/joe"
  gid "users"
  uid 1002
  supports :manage_home =&gt; true
end</code></pre>

<ul>
<li>username - name attribute, name of the user</li>
<li>comment - GECOS field or user comment</li>
<li>shell - user login shell, use full path</li>
<li>home - user's home directory</li>
<li>gid - user's primary group, can be name or numeric</li>
<li>uid - numeric user id</li>
<li>supports - (Array) indicate that the useradd command supports
managing the user home directory, e.g. "-m"</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/38">
<h1>system user example</h1>

<pre class="sh_ruby"><code>user "myapp" do
  system true
  comment "my appliation user"
  shell "/bin/false"
end</code></pre>

<ul>
<li>system - creates a "system" user assigning a UID per the platorm's
OS policy for user creation (e.g., <code>/etc/login.defs</code>).</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/39">
<h1>user passwords</h1>

<p>Chef can manage the user's password as well. The local installation of
Ruby must have Shadow password support on Unix/Linux systems. This is
available in the full-stack installer by installing the <code>ruby-shadow</code>
RubyGem, as Ruby 1.9 removed it from the standard library.</p>

<p>Passwords must be supplied using the correct password hashing for the
underlying OS. For example, generate an MD5 hashed password with openssl:</p>

<pre><code>openssl passwd -1 "theplaintextpassword"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/40">
<h1>user password example</h1>

<pre class="sh_ruby"><code>user "joe" do
  comment "Joe User"
  shell "/bin/bash"
  home "/home/joe"
  gid "users"
  uid 1002
  password "$1$JJsvHslV$szsCjVEroftprNn4JHtDi."
end</code></pre>

<p class="notes">This does not have to be repeated from the earlier example,
especially all the typing of that obnoxious password.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/41">
<h1>Services/daemons</h1>

<p>Services or application daemons can be managed in Chef using the
<code>service</code> resource. Like packages and groups/users, services have
platform dependent commands.</p>

<ul>
<li><code>service</code></li>
</ul>

<p>The service resource does not have a default action.</p>

<p class="notes">Why no default? Because Chef doesn't have a "reasonable" idea
of what it means to say you have a service resource to manage.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/42">
<h1>service example</h1>

<pre class="sh_ruby"><code>service "apache2" do
  supports :status =&gt; true
  action :enable
end</code></pre>

<ul>
<li>supports - a metaparameter specially supported by service providers,
in this case indicates that the init script can take a "status"
command, <code>:restart</code> and <code>:reload</code> are also available.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/43">
<h1>Starting services</h1>

<p>As Chef takes action to configure resources in the order written, it
may be sensible to not start a service right away. It is common
practice to follow the pattern:</p>

<ul>
<li>Install the package</li>
<li>Enable the service at boot time</li>
<li>Write configuration files</li>
<li>Start the service</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/44">
<h1>Starting services</h1>

<p>Service resources can have a <code>:start</code> action to start running the
service. This depends on the provider, but it is typically by using
the init script or control scripts that call the init script. For
example:</p>

<ul>
<li>Debian/Ubuntu: <code>/usr/sbin/invoke-rc.d</code></li>
<li>Red Hat family: <code>/sbin/chkconfig</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/45">
<h1>Starting services</h1>

<p>A common way to start a service is to issue a <code>:restart</code> action through
resource notification.</p>

<pre class="sh_ruby"><code>service "apache2" do
  supports :restart =&gt; true
  action :enable
end

template "/etc/apache2/apache2.conf" do
  # ... other parameters
  notifies :restart, "service[apache2]"
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/46">
<h1>Notifications</h1>

<p>Notifications cause resource state to change with the specified action
based on change to another resource.</p>

<p>There are two kinds of notifications, <code>notifies</code> and <code>subscribes</code>. We
will focus on <code>notifies</code>. The take the following form:</p>

<pre class="sh_ruby"><code>resource "my-name" do
  notifies :action, "type[their-name]", :timing
end</code></pre>

<p>If <code>resource[my-name]</code> changes (such as a template being rendered),
then <code>:action</code> will be sent to <code>type[their-name]</code>. The <code>:timing</code> can
be <code>:delayed</code> (default if not specified) or
<code>:immediately</code>. Notifications are queued, and happen only one time.</p>

<p class="notes">Child A, go tell this message (action) to your sibling
(type[their name]), and do so right now (:timing). Or later on.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/47">
<h1>Starting services</h1>

<p>If the <code>template[/etc/apache2/apache2.conf]</code> resource changes, it will
cause the <code>apache2</code> service to be restarted. If it were <em>not</em> already
running, this usually means it will be started.</p>

<pre class="sh_ruby"><code>service "apache2" do
  supports :restart =&gt; true
  action :enable
end

template "/etc/apache2/apache2.conf" do
  # ... other parameters
  notifies :restart, "service[apache2]"
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/48">
<h1>Restarting services</h1>

<p>Do not specify the action <code>:restart</code> on a service resource in a recipe
as it will restart every time Chef runs. Do use notifies to send the
<code>:restart</code> action from configuration files.</p>

<p>When Chef takes the <code>:restart</code> action on the resource, by default it
will attempt to "stop" then "start" the service using the provider's
stop and start commands.</p>

<p>If the parameter <code>supports :restart =&gt; true</code> is set, then Chef will
use the <code>restart</code> command for the service.</p>

<pre><code>sudo /usr/sbin/invoke-rc.d apache2 restart
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/49">
<h1>Reloading services</h1>

<p>You can reload services using their init script's reload command, but
only if the service resource supports reload:</p>

<pre class="sh_ruby"><code>service "apache2" do
  supports :reload =&gt; true
end</code></pre>

<p>This is often used to "HUP" the process to reload the
configuration. Refer to your system's or package's documentation.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/50">
<h1>Executing programs</h1>

<p>Sometimes to configure a system to do its job, commands or scripts
need to be run. Chef has command and script execution resources:</p>

<ul>
<li><code>execute</code></li>
<li><code>script</code> (Bash, Csh, Perl, Python, Ruby)</li>
</ul>

<p>Chef will shell out to the system and run the specified command with
execute, or render the code in a script and execute it.</p>

<p>The <code>execute</code> resource is the basis for <code>script</code> and its child
resources (<code>bash</code>, <code>csh</code>, <code>perl</code>, <code>python</code> and <code>ruby</code>).</p>

<p>The default action for execute and script resources is to run the command/script.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/51">
<h1>execute examples</h1>

<pre class="sh_ruby"><code>execute "apt-get update"

execute "configure software" do
  command "./configure"
  cwd "/usr/src/software-1.0"
end</code></pre>

<ul>
<li>command - name attribute, the command to run</li>
<li>cwd - directory where the command is run</li>
<li>creates - a file that is created by the command</li>
<li>user - user to run the command</li>
<li>group - group to run the command</li>
<li>environment - hash of environment variables to set</li>
<li>returns - valid command return codes, can be an array</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/52">
<h1>scripts</h1>

<p>The script resource defines a script that will be rendered as a file
and executed by Chef with the given interpreter. There are shortcut
script resources that will use the specified interpreter.</p>

<pre class="sh_ruby"><code>script "install_something" do
  interpreter "bash"
  code &lt;&lt;-EOH
  # the code
  EOH
end

bash "install_something" do
  code &lt;&lt;-EOH
  # the code
  EOH
end</code></pre>

<p class="notes">This is useful as a technique to move existing "legacy" shell
scripts and the like into Chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/53">
<h1>Idempotent commands</h1>

<p>By their nature, arbitrary commands and scripts are <em>not</em> idempotent,
since Chef just executes the raw commands. They will run every time
Chef runs. Some strategies can be used to make execute and script
resources idempotent.</p>

<ul>
<li>use <code>creates</code> parameter, if the command creates a file, it won't be
run if the file already exists.</li>
<li>use <code>not_if</code> or <code>only_if</code> metaparameters</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/54">
<h1>Conditional execution</h1>

<p>The <code>not_if</code> and <code>only_if</code> metaparamters will tell Chef to only take
action on the resource based on the conditional.</p>

<ul>
<li>Chef will <em>not</em> take action if <code>not_if</code> condition is true</li>
<li>Chef will <em>only</em> take action if <code>only_if</code> condition is true.</li>
</ul>

<p>The conditional can be passed a string or a ruby block. A string will
be executed as a command and considered <code>true</code> if the return code of
the command is 0. A ruby block will be evaluated as ruby code for <code>true</code>/<code>false</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/55">
<h1>Conditional execution</h1>

<pre class="sh_ruby"><code>execute "setenforce 1" do
  not_if "getenforce | grep -qx 'Enforcing'"
end

execute "apt-get update" do
  not_if { ::File.exists?('/var/lib/apt/periodic/update-success-stamp') }
  action :nothing
end</code></pre>

<p class="notes">We use the :: in front of File due to Ruby namespacing. A
common guard is "grep -q" or even "grep -qx".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/56">
<h1>Uncommon Resources</h1>

<ul>
<li>Application deployment</li>
<li>Interacting with other services</li>
<li>Filesystem management</li>
<li>Network configuration</li>
<li>Special resources</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/57">
<h1>Application deployment</h1>

<p>Full exploration of application deployment is beyond the scope of this course.</p>

<ul>
<li><code>deploy</code> - capistrano style deployment</li>
<li><code>scm</code> - Git, Subversion supported (<code>git</code> and <code>subversion</code> resources)</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/58">
<h1>Interacting with other services</h1>

<ul>
<li><code>cron</code> - creates crontab entry</li>
<li><code>env</code> - sets system-wide Windows ENV variables (Windows only at this time)</li>
<li><code>erl_call</code> - make a call to an Erlang process</li>
<li><code>http_request</code> - makes an HTTP request, useful for interacting with
HTTP-based APIs</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/59">
<h1>Filesystem management</h1>

<ul>
<li><code>mdadm</code> - software RAID on Linux systems</li>
<li><code>mount</code> - mounts a filesystem</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/60">
<h1>Network configuration</h1>

<ul>
<li><code>ifconfig</code> - manage network interfaces on Linux with ifconfig,
add/delete actions work on most distributions, enable only works on
EL family</li>
<li><code>route</code> - manage network routes on Linux with route, writing config
only works on EL family</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/61">
<h1>Special resources</h1>

<ul>
<li><code>log</code> - outputs a log message during the execute phase using the
Chef logger</li>
<li><code>ohai</code> - reloads node's automatic attributes, e.g. after deploying a
new ohai plugin</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/62">
<h1>Advanced resources</h1>

<ul>
<li><code>breakpoint</code> - sets a breakpoint used by shef</li>
<li><code>ruby_block</code> - executes a block of Ruby code, not the same as the
ruby script provider</li>
</ul>

<p class="notes">A ruby block can be used to promote execution from the compile
phase into the "execution" phase. Between these two, students will see
(and use) <code>ruby_block</code> most often.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/63">
<h1>Running Chef</h1>

<p>If we did kick off a Chef run (enter the execution phase), then all
the resources entered to this point would be configured as we wrote
them.</p>

<p>Many of the resource examples we used are incomplete - we do not have
source files for some of the templates and cookbook_files.</p>

<p>Chef will halt execution when it encounters an unhandled exception.</p>

<p class="notes">the <code>shef</code> command to enter the execution phase is <code>run-chef</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/64">
<h1>Summary</h1>

<ul>
<li>Understand the components of resources.</li>
<li>Write recipes using common resources.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/65">
<h1>Questions</h1>

<ul>
<li>What are the components of a resource?</li>
<li>What are the three resources for managing file contents? How do they
differ?</li>
<li>What resource manages running daemons on the node?</li>
<li>How does Chef run arbitrary user commands on the system?</li>
<li>What are three package providers for the package resource?</li>
<li>Name at least two interpreters for script resources.</li>
<li>Student questions?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/66">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Resources</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="resources-in-depth/01_slide/67">
<h1>Lab Exercise</h1>

<p>Resources In Depth</p>

<ul>
<li>Understand components of resources</li>
<li>Write resources into shef and observe the outcome</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/1">
<h1>Troubleshooting</h1>

<p>Section Objectives:</p>

<ul>
<li>Work with Chef's logger</li>
<li>Find and debug Chef's stack traces</li>
<li>Recognize HTTP status codes from the Chef Server</li>
<li>Gracefully handle errors in recipes</li>
<li>Understand Chef's exception handlers</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/2">
<h1>Chef Log Locations</h1>

<p>Chef configures a "logger" object.</p>

<p>The logger sends messages to STDOUT by default</p>

<p>The logger can be configured to send to a specific log in the
client.rb, or on the command-line.</p>

<pre><code># in /etc/chef/client.rb
log_location STDOUT
log_location "/var/log/chef/client.log"

# command-line
chef-client -L /var/log/chef/client.log
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/3">
<h1>Chef Log Locations</h1>

<p>Chef can run as a system service a variety of ways. On Linux/Unix
systems, it is common to use an init script,
e.g. <code>/etc/init.d/chef-client</code>. The default location for the log file is:</p>

<ul>
<li><code>/var/log/chef/client.log</code></li>
</ul>

<p>Other daemonization methods vary, e.g., runit captures STDOUT, to a
file:</p>

<ul>
<li><code>/etc/sv/chef-client/log/main/current</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/4">
<h1>Chef Log Level</h1>

<p>"INFO" with "verbose" logging output is the default. <code>verbose_logging</code>
shows messages about the resource being processed when Chef runs.</p>

<pre><code># in /etc/chef/client.rb
log_level :info
log_level :debug
verbose_logging true
verbose_logging false

# command-line
chef-client -l debug
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/5">
<h1>Debug Logging</h1>

<p>All the various commands in Chef can enable debug log output.</p>

<p>The location for the log can also be specified.</p>

<p>This is handled with the mixlib-log library.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/6">
<h1>Debug logging</h1>

<pre><code># With command-line arguments
&lt;command&gt; -l debug
&lt;command&gt; -L /tmp/debug.log

# In the appropriate config file
log_level :debug
log_location "/tmp/debug.log"
</code></pre>

<p>These are applicable to all the commands used by Chef.</p>

<p>shef, chef-client, chef-solo and even ohai.</p>

<p>knife uses -VV</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/7">
<h1>Debug Logging</h1>

<pre><code>chef-client -l debug -L /tmp/chef-client-$$.log
knife -VV -L /tmp/knife-debug.log
</code></pre>

<p>A couple examples of enabling debug logging. With Knife this is actually -VV (changed in 0.10.0).</p>

<p><code>$$</code> is the PID of the running process.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/8">
<h1>Chef Stack Traces</h1>

<p>Chef completely halts execution when it encounters an unhandled exception.</p>

<p>It doesn't know if the error is something serious that can cause state issues that are unrecoverable.</p>

<p>It is up to you to fix the error and re-run Chef.</p>

<p>Stack traces are left behind in a file, by default
<code>/var/chef/cache/chef-stacktrace.out</code>. The directory location is
<code>file_cache_path</code> in <code>/etc/chef/client.rb</code>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/9">
<h1>Chef Stack Traces</h1>

<p>Dumping the entire stack is helpful because it shows all the methods
that were called and which line in the library they are found.</p>

<p>However, knowing where to look is the key.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/10">
<h1>Common Errors</h1>

<p>We're going to look at some common errors that are easily
resolved. The lines with the full path to the Ruby file can be long so
the non-unique part will be truncated.</p>

<ul>
<li>non-existent cookbook</li>
<li>error in a template</li>
<li>non-zero return code from a command</li>
<li>invalid search query syntax</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/11">
<h1>Non-existent cookbook</h1>

<pre><code>INFO: HTTP Request Returned 412 Precondition Failed:
{"non_existent_cookbooks":["fail2ban"],"cookbooks_with_no_versions":
[],"message":"Run list contains invalid items: no such
cookbook fail2ban."}
ERROR: Running exception handlers
FATAL: Saving node information to /var/chef/cache/failed-run-data.json
ERROR: Exception handlers complete
FATAL: Stacktrace dumped to /var/chef/cache/chef-stacktrace.out
FATAL: Net::HTTPServerException: 412 "Precondition Failed"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/12">
<h1>Non-existent cookbook</h1>

<pre><code>$ cat /var/chef/cache/chef-stacktrace.out
Generated at 2011-09-21 02:23:21 +0000
Net::HTTPServerException: 412 "Precondition Failed"
1.9.1/net/http.rb:2303:in `error!'
gems/1.9.1/gems/chef-0.10.4/lib/chef/rest.rb:237:in
`block in api_request'
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/13">
<h1>Template Error</h1>

<pre><code>chef/mixin/template.rb:43:in `render_template': undefined
local variable or method `ode' for
#&lt;Erubis::Context:0x7fd34e83cd08&gt;
(Chef::Mixin::Template::TemplateError)
        from chef/provider/template.rb:100:in `render_with_context'
        from chef/provider/template.rb:39:in `action_create'
        from chef/resource.rb:395:in `send'
        from chef/resource.rb:395:in `run_action'
        from chef/runner.rb:53:in `run_action'
        from chef/runner.rb:89:in `converge'
        from chef/runner.rb:89:in `each'
        from chef/runner.rb:89:in `converge'
...
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/14">
<h1>Template Error</h1>

<pre><code>chef/mixin/template.rb:43:in `render_template':
undefined local variable or method `ode' for
#&lt;Erubis::Context:0x7fd34e83cd08&gt;
(Chef::Mixin::Template::TemplateError)
</code></pre>

<p>Clearly from the first message, this is a template error.</p>

<p>What template is this from?</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/15">
<h1>Template Error</h1>

<p>The last part of the stack trace comes from dumping the exception from
the exception handler.</p>

<p>We need to scroll up in the output to find what template and where.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/16">
<h1>Template Error</h1>

<p>The output from the run before the exception handler dumped the stack
trace. This shows the offending line ("ode" instead of "node").</p>

<pre><code>ERROR: template[/tmp/chef-getting-started.txt]
(/var/cache/chef/cookbooks/getting-started/recipes/default.rb:20:in
`from_file') had an error:

Chef::Mixin::Template::TemplateError (undefined local variable
or method `ode' for #&lt;Erubis::Context:0x7fd34e83cd08&gt;) on line #3:

  1: Welcome to Chef!
  2:
  3: This is Chef version &lt;%= ode[:chef_packages][:chef][:version] %&gt;.
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/17">
<h1>Non-Zero Return Code</h1>

<pre><code>ERROR: Exception handlers complete
chef/mixin/command.rb:184:in `handle_command_failures':
apt-get update returned 100, expected 0 (Chef::Exceptions::Exec)
        from chef/mixin/command.rb:131:in `run_command'
        from chef/provider/execute.rb:49:in `action_run'
        from chef/resource.rb:395:in `send'
        from chef/resource.rb:395:in `run_action'
        from chef/runner.rb:53:in `run_action'
        from chef/runner.rb:89:in `converge'
        from chef/runner.rb:89:in `each'
        from chef/runner.rb:89:in `converge'
        from chef/resource_collection.rb:94
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/18">
<h1>Non-Zero Return</h1>

<pre><code>/usr/lib/ruby/1.8/chef/mixin/command.rb:184:in
`handle_command_failures':
apt-get update returned 100, expected 0 (Chef::Exceptions::Exec)
</code></pre>

<p>The first line of the stack trace will show the command and the return
code.</p>

<p>The expected return code by default is zero.</p>

<p>If Chef is run with a TTY, the command output is displayed.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/19">
<h1>Non-Zero Return</h1>

<pre><code>chef-client -l debug
</code></pre>

<p>Run Chef with debug logging (more on this later).</p>

<p>This generates a lot of output but the error message will be near the
bottom.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/20">
<h1>Non-Zero Return</h1>

<p>Output is truncated:</p>

<pre><code>DEBUG: Re-raising exception: Chef::Exceptions::Exec -
apt-get update returned 100, expected 0
---- Begin output of apt-get update ----
STDOUT:
Ign http://us.archive.ubuntu.com mylinuxsource/restricted Packages
Err http://us.archive.ubuntu.com mylinuxsource/main Packages
  404  Not Found [IP: 91.189.88.31 80]
Err http://us.archive.ubuntu.com mylinuxsource/restricted Packages
  404  Not Found [IP: 91.189.88.31 80]STDERR: W: Failed to fetch h
W: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/
E: Some index files failed to download, they have been ignored, or old ones used instead.
---- End output of apt-get update ----
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/21">
<h1>Invalid Search</h1>

<pre><code>WARN: HTTP Request Returned 500 Internal Server Error:
Net::HTTPServerException: 400 "orgapachelucenequeryParserParse
Exception_Cannot_parse_content____true__or__not_allowed_as_first
_character_in_WildcardQuery"
ERROR: Running exception handlers
ERROR: Exception handlers complete
net/http.rb:2101:in `error!': 500 "Internal Server Error"
(Net::HTTPFatalError)
        from chef/rest.rb:233:in `api_request'
        from chef/rest.rb:284:in `retriable_rest_request'
        from chef/rest.rb:214:in `api_request'
        from chef/rest.rb:110:in `get_rest'
        from chef/search/query.rb:37:in `search'
        from chef/mixin/language.rb:138:in `search'
        from {cache}/chef/cookbooks/getting-started/recipes/default.rb:25:in `from_file'
        from chef/cookbook_version.rb:472:in `load_recipe'
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/22">
<h1>Invalid Search</h1>

<pre><code>...
from {cache}/chef/cookbooks/getting-started/recipes/default.rb:25:in `from_file'
...
</code></pre>

<p>Search query syntax follows SOLR Lucene</p>

<p>If there's a syntax error, we'll see a 500 from the server.</p>

<p>To find where the query is in the recipe, look for the line above.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/23">
<h1>Invalid Search</h1>

<pre><code>% sudo sed -n 25p cookbooks/getting-started/recipes/default.rb
</code></pre>

<p>We can view the specific line in the cookbook on the node with sed.</p>

<p>Or just view it in your local repository with your favorite editor.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/24">
<h1>Fixing Recipe Errors</h1>

<p>Fixing recipes errors is relatively straightforward after they have
been detected similar to the approaches above.</p>

<ul>
<li>Modify the recipe / cookbook.</li>
<li>Upload cookbook to Chef Server.</li>
<li>Run Chef on node(s).</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/25">
<h1>HTTP Status Codes</h1>

<p>The Chef Server has a RESTful HTTP API.</p>

<p>Since Chef speaks HTTP, some conditions may cause an HTTP status code.</p>

<p>Most of the time this should be a "200 OK". Occassionally some error
condition will cause a different kind of HTTP status code.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/26">
<h1>HTTP Status Codes</h1>

<p>Common status codes.</p>

<ul>
<li>401 unauthorized</li>
<li>403 forbidden</li>
<li>404 not found</li>
<li>409 conflict</li>
<li>412 precondition failed</li>
<li>500 internal server error</li>
<li>503 service unavailable</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/27">
<h1>HTTP Status Code</h1>

<pre><code>WARN: HTTP Request Returned 401 Unauthorized: Failed the
authorization check
net/http.rb:2101:in `error!': 401 "Unauthorized"
(Net::HTTPServerException)
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/28">
<h1>401 Unauthorized</h1>

<p>Common causes:</p>

<ul>
<li>system time is not synced</li>
<li>incorrect node name</li>
<li>incorrect client configuration</li>
<li>invalid certificate file (validation or client)</li>
</ul>

<p>The Chef Server message will indicate what the likely cause is.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/29">
<h1>403 Forbidden</h1>

<p>Common causes:</p>

<ul>
<li>ACL on Opscode Hosted Chef</li>
<li>Timeout retrieving files from S3 or other transient S3 error.</li>
<li>Creating a data bag item when the bag doesn't exist</li>
<li>Attempting to create an API Client that exists</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/30">
<h1>404 Not Found</h1>

<p>Common causes</p>

<ul>
<li>a source cookbook_file or template was requested but not uploaded</li>
<li>another file in the cookbook was not found when requested.</li>
<li>initial run of chef-client when the node doesn't yet exist (normal).</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/31">
<h1>409 Conflict</h1>

<p>This usually happens when a new client is attempting to save itself as
a node that already exists.</p>

<p>Usually this is a warning or info (depending on context), and can be
ignored, but you should be aware of it.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/32">
<h1>412 Precondition Failed</h1>

<p>This usually happens when cookbook metadata isn't updated for a
dependency, or a cookbook wasn't uploaded.</p>

<p>A typo on a recipe name in a run list can also cause a 412 error.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/33">
<h1>500 Internal Server Error</h1>

<p>This is rarely a user error, however as discussed SOLR search syntax
errors can cause a 500 error.</p>

<p>Otherwise, something on the server backend had an error that wasn't
handled.</p>

<ul>
<li>Opscode's operations staff is notified on 500's.</li>
<li>We investigate and resolve these as quickly as possible.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/34">
<h1>503 Service Unavailable</h1>

<p>Occasionally, Opscode will perform maintenance on Hosted Chef. For
example we recently did a data center migration.</p>

<p>If you see a 503 and weren't expecting it, check
<a href="http://status.opscode.com">status.opscode.com</a>.</p>

<p>If you need help, open a ticket at
<a href="http://help.opscode.com">help.opscode.com</a> or email
<a href="mailto:support@opscode.com">support@opscode.com</a>.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/35">
<h1>Running a Chef Server</h1>

<p>If you encounter any of the HTTP status codes, you can enable debug
logging for the server.</p>

<p>Seek help through the community on the mailing list
(<a href="http://lists.opscode.com">lists.opscode.com</a>) or IRC (<a href="irc://irc.freenode.net/chef">irc.freenode.net #chef</a>).</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/36">
<h1>Handling Errors in Recipes</h1>

<p>Recipes are "just Ruby".</p>

<p>Normally we can use a begin/rescue block to handle errors.</p>

<p>We can also cause Chef to bail out.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/37">
<h1>begin..rescue</h1>

<pre class="sh_ruby"><code>begin
  aws = data_bag_item('aws', 'main')
rescue
  raise
end</code></pre>

<p>"raise" will raise an exception and cause Chef to exit, we can
also use code to handle the error gracefully.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/38">
<h1>Chef::Application.fatal!</h1>

<pre class="sh_ruby"><code>Chef::Application.fatal!("I encountered a problem")</code></pre>

<p>The Chef::Application class has a fatal! method that takes a string printed to FATAL level in the logger, and optionally a return status.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/39">
<h1>Ignoring Failure</h1>

<p>If the failure for a particular resource is acceptable, you can use
the <code>ignore_failure</code> meta-parameter to tell Chef not to exit if it
encounters an error configuring that resource.</p>

<pre class="sh_ruby"><code>execute "apt-get update" do
  ignore_failure true
end</code></pre>

<p>This is available to every resource.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/40">
<h1>Exception and Report Handlers</h1>

<p>Chef has an API for reporting and exception handling.</p>

<p>Full coverage of the topic is beyond the scope of a "Fundamentals"
course. The Chef wiki has an
<a href="http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers">entire page documenting the API</a>.</p>

<p>We'll take a brief look at the requirements to set up a handler.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/41">
<h1>Handler Configuration</h1>

<p>Chef has two configuration options for setting up a new
report/exception handler.</p>

<ul>
<li><code>report_handlers</code></li>
<li><code>exception_handlers</code></li>
</ul>

<p>These are both Arrays, to which new instantiation of the handler
classes are added.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/42">
<h1>Simple Example Handler</h1>

<p>We're going to set up a very simple example that prints the name of
the resources updated in the Chef run.</p>

<p>The handler itself doesn't actually do anything, but it could.</p>

<p>Handlers are written in Ruby and loaded by the <code>chef-client</code> when it runs.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/43">
<h1>Handler Example Code</h1>

<p>We'll put this in <code>/var/chef/handlers/simple_report_handler.rb</code>, but
it can go anywhere.</p>

<pre class="sh_ruby"><code>require 'chef/handler'
module SimpleReport
  class UpdatedResources &lt; Chef::Handler
    def report
      Chef::Log.info "Resources updated this run:"
      run_status.updated_resources.each {|r| Chef::Log.info "  #{r.to_s}"}
    end
  end
end</code></pre>

<p>The handler should inherit <code>Chef::Handler</code>. It should define a 'report' method.</p>

<p>Documentation is on the <a href="http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers">Chef wiki</a>.</p>

<p class="notes">This specific handler can be installed with the ruby gem
"chef-handler-updated-resources".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/44">
<h1>Handler Configuration</h1>

<pre class="sh_ruby"><code># /etc/chef/client.rb...
#
# a file dropped off by cookbook_file:
require '/var/chef/handlers/simple_report_handler'

report_handlers &lt;&lt; SimpleReport::UpdatedResources.new
exception_handlers &lt;&lt; SimpleReport::UpdatedResources.new</code></pre>

<p class="notes">The 'require' statement does not use the .rb extension of the
file.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/45">
<h1>Chef Handler Cookbook</h1>

<p>Opscode released a cookbook to make managing report handlers easier.</p>

<ul>
<li>http://community.opscode.com/cookbooks/chef_handler</li>
</ul>

<p>Download it to your Chef Repository like any other cookbook:</p>

<pre><code>knife cookbook site download chef_handler
tar -zxvf chef_handler-1.0.0.tar.gz -C cookbooks
</code></pre>

<p>See the cookbook's README for documentation.</p>

<p class="notes">Opscode is working on API endpoints to send reports/exceptions,
but this is not built into the Chef Client or the Chef Handler
cookbook at this time.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/46">
<h1>Summary</h1>

<ul>
<li>Work with Chef's logger</li>
<li>Debug Chef's stack traces</li>
<li>Recognize HTTP status codes from the Chef Server</li>
<li>Gracefully handle errors in recipes</li>
<li>Understand Chef's report/exception handlers</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/47">
<h1>Questions</h1>

<ul>
<li>What are two ways to run chef-client with debug log output?</li>
<li>What does <code>verbose_logging</code> show/hide when changed?</li>
<li>Where does Chef write the stack trace output to by default? What
configuration setting can change the directory location?</li>
<li>What is the workflow for correcting cookbook errors?</li>
<li>What often causes a 401 error?</li>
<li>How can a 412 error be resolved?</li>
<li>Describe the report/exception handling feature of Chef.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="troubleshooting/01_slide/48">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Common+Errors</li>
<li>http://wiki.opscode.com/display/chef/Exception+and+Report+Handlers</li>
<li>http://wiki.opscode.com/display/chef/Troubleshooting+and+Technical+FAQ</li>
<li>http://help.opscode.com/ or support@opscode.com</li>
<li>http://lists.opscode.com</li>
</ul>

<p>Several existing handlers are available on the Exception and Report
Handlers page linked above.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/1">
<h1>Roles</h1>

<p>Section Objectives:</p>

<ul>
<li>Understand the components of a role</li>
<li>Create roles with the Ruby DSL</li>
<li>View roles on the Chef Server</li>
<li>Apply roles to nodes</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/2">
<h1>Components of a Role</h1>

<p>Run list</p>

<ul>
<li>recipes</li>
<li>roles</li>
</ul>

<p>Attributes applied to the nodes that have this role.</p>

<ul>
<li>default</li>
<li>override</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/3">
<h1>Creating Roles</h1>

<p>The <code>roles</code> directory in the chef-repo contains the roles for the infrastructure.</p>

<p>Write roles using a Ruby DSL.</p>

<pre><code>$EDITOR roles/base.rb
</code></pre>

<p>Upload the roles to the Chef Server. Knife will automatically look for
the specified file in the <code>roles</code> directory.</p>

<pre><code>knife role from file base.rb
</code></pre>

<p>Roles are converted to JSON on the server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/4">
<h1>Ruby or JSON</h1>

<p>Chef supports Ruby DSL or JSON for role files in chef-repo.</p>

<ul>
<li>Ruby DSL roles require less syntax.</li>
<li>Ruby is converted to JSON by Knife when uploading.</li>
<li>Chef Server stores roles as JSON.</li>
<li><code>knife role show</code> displays JSON and can be redirected to a file.</li>
</ul>

<p class="notes">We commonly use the Ruby DSL for creating roles, because it is
a bit lighter syntax, and allows flexibility of using Ruby idioms.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/5">
<h1>Building Roles</h1>

<p>What kind of roles do we need?</p>

<ul>
<li><code>base</code> role.</li>
<li>per-service roles.</li>
<li>platform roles.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/6">
<h1>Base Role</h1>

<p>We use a role called <code>base</code> that gets applied to every system in the infrastructure.</p>

<p>This contains the basics that all systems should have.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/7">
<h1>roles/base.rb</h1>

<pre class="sh_ruby"><code>name "base"
description "Base role applied to all nodes."

run_list(
  "recipe[chef-client]",
  "recipe[fail2ban]",
  "recipe[users]"
)

default_attributes(
  "chef_client" =&gt; {
    "server_url" =&gt; "https://api.opscode.com/organizations/ORGNAME",
    "validation_client_name" =&gt; "ORGNAME-validator"
  },
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/8">
<h1>Per-service Roles</h1>

<p>In a service oriented architecture, each different service should have
its own role with the recipes that determine how to fulfill that
service.</p>

<p>For example, it is common in a web-application architecture to have
webservers.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/9">
<h1>roles/webserver.rb</h1>

<pre class="sh_ruby"><code>name "webserver"
description "Systems that serve HTTP traffic"
run_list(
  "recipe[apache2]",
  "recipe[apache2::mod_ssl]"
)
default_attributes(
  "apache" =&gt; {
    "listen_ports" =&gt; [ 80, 443 ]
  }
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/10">
<h1>Per-service Roles</h1>

<p>We create separate roles that are service specific. This allows us to
break up services to run on separate hosts, or on a single
host. Common roles in web applications:</p>

<ul>
<li><code>database_master</code></li>
<li><code>load_balancer</code></li>
<li><code>memcached</code></li>
<li><code>monitoring</code></li>
<li><code>anything_you_want</code></li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/11">
<h1>Platform Roles</h1>

<p>In a heterogenous infrastructure where multiple platforms are present,
it makes sense to have platform-specific roles to do things specific
to that platform.</p>

<p>Set up package repositories or service management tools and default
attributes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/12">
<h1>roles/ubuntu.rb</h1>

<pre class="sh_ruby"><code>name "ubuntu"
description "Role applied to all Ubuntu systems."

run_list(
  "recipe[apt]",
  "role[base]"
)

default_attributes(
  "chef_client" =&gt; {
    "init_style" =&gt; "upstart"
  }
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/13">
<h1>roles/fedora.rb</h1>

<pre class="sh_ruby"><code>name "fedora"
description "Role applied to all Fedora systems."

run_list(
  "recipe[yum]",
  "role[base]"
)

default_attributes(
  "chef_client" =&gt; {
    "init_style" =&gt; "init"
  }
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/14">
<h1>Apply Roles to a Node</h1>

<p>Use knife:</p>

<pre><code>knife node run list add NODE 'role[base]'
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/15">
<h1>Summary</h1>

<ul>
<li>Understand the components of a role</li>
<li>Create roles with the Ruby DSL</li>
<li>View roles on the Chef Server</li>
<li>Apply roles to nodes</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/16">
<h1>Questions</h1>

<ul>
<li>What are the components of a role?</li>
<li>What is the difference between the Ruby DSL and JSON for roles?</li>
<li>What knife command is used to add a role to a node's run list?</li>
<li>What knife command sends the role to the Chef Server from the local repository?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="roles/01_slide/17">
<h1>Lab Exercise</h1>

<p>Roles</p>

<ul>
<li>Understand how to create roles with the Ruby DSL</li>
<li>Upload a role to the Chef Server with knife</li>
<li>Modify a node's run list directly with knife</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/1">
<h1>Chef Node</h1>

<p>Section Objectives:</p>

<ul>
<li>Properties of the Chef::Node object</li>
<li>Common attributes from ohai</li>
<li>Original location of node attributes</li>
<li>Node's run list</li>
<li>Methods available in recipes</li>
<li>Use <code>knife</code> and <code>shef</code> to examine nodes</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/2">
<h1>Chef::Node</h1>

<p>The first class citizen in Chef is the <code>Chef::Node</code>. The server stores
a copy of the node, and indexes it for search.</p>

<p>Ultimately, the node itself is the authority for its own
configuration. The <code>Chef::Node</code> object contains the run list and
attributes about the node itself.</p>

<p>An instance of <code>Chef::Node</code> is created for the Chef run, available in
recipes, templates and other cookbook components as "<code>node</code>".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/3">
<h1>Node Name</h1>

<p>Every node has a name which must be unique. By default, Chef will use
the node's fully-qualified domain name, since that is fairly safe.</p>

<p>You can override the name using <code>node_name</code> in the client config, or
by passing <code>-N NAME</code> to <code>chef-client</code>.</p>

<p>The <code>Chef::Node</code> object has a method, <code>name</code> to return the node's
name.</p>

<pre class="sh_ruby"><code># In some recipe...
node.name # =&gt; "www1.example.com"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/4">
<h1>Node Attributes</h1>

<p>Node's have attributes, which are data about the node
itself. Attributes can come from a variety of sources in Chef. Most
commonly:</p>

<ul>
<li>Automatic (ohai)</li>
<li>Cookbooks (attributes or recipes)</li>
<li>Roles</li>
</ul>

<p>Other locations are available, but they are out of scope for this course.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/5">
<h1>Ohai: Automatic Attributes</h1>

<p>Ohai determines many node attributes automatically for Chef. This is
the first thing that Chef does when it runs.</p>

<p>Values such as <code>platform</code>, <code>platform_version</code>, <code>ipaddress</code>, <code>hostname</code>
are determined by Ohai.</p>

<p>These are "automatic" attributes and cannot be overridden.</p>

<p>You can find the attributes of a node by running "ohai".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/6">
<h1>Example Attributes</h1>

<p>The exact attributes will vary by node based on the platform and the
available plugins. The following list is an abbreviated example from
an Ubuntu Linux node. Each of these may have values that are strings,
arrays or hashes.</p>

<ul>
<li><code>chef_packages</code> - version information about Chef and Ohai</li>
<li><code>cpu</code> - information about installed processor(s)</li>
<li><code>current_user</code> - UID of the process</li>
<li><code>dmi</code> - if <code>dmi_decode</code> is installed, DMI information is available</li>
<li><code>domain</code> - the node's domain, e.g., the non-hostname portion of the <code>fqdn</code>.</li>
<li><code>etc</code> - users and groups on the system</li>
<li><code>filesystem</code> - mounted/available filesystems</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/7">
<h1>Example Attributes (continued)</h1>

<ul>
<li><code>fqdn</code> - fully qualified domain name, e.g. <code>hostname -f</code></li>
<li><code>hostname</code> - first portion of <code>fqdn</code>.</li>
<li><code>ipaddress</code> - IP address of the interface with the default route</li>
<li><code>keys</code> - host SSH keys</li>
<li><code>languages</code> - information about programming languages</li>
<li><code>lsb</code> - Linux systems with LSB packages may have information here</li>
<li><code>macaddress</code> - the MAC address of the interface with the default route.</li>
<li><code>memory</code> - memory statistics/information</li>
<li><code>network</code> - information about all the installed network interfaces</li>
<li><code>ohai_time</code> - the Unix Epoch when Ohai was called</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/8">
<h1>Example Attributes (continued)</h1>

<ul>
<li><code>os</code> - the operating system kernel</li>
<li><code>os_version</code> - the OS kernel version</li>
<li><code>platform</code> - the platform/distribution</li>
<li><code>platform_version</code> - the version of the platform/distribution</li>
<li><code>recipes</code> - all the recipes appearing in the expanded run list</li>
<li><code>roles</code> - all the roles appearing in the expanded run list</li>
<li><code>uptime</code> - the system's uptime</li>
<li><code>uptime_seconds</code> - uptime in seconds, useful for calculation</li>
<li><code>virtualization</code> - if the node is virtualized, additional
information is avaialble</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/9">
<h1>Attribute Values</h1>

<p>Node attributes can be used in recipes and templates.</p>

<p>Access node attributes like Ruby hash keys.</p>

<pre class="sh_ruby"><code>node["fqdn"] # =&gt; "www1.example.com"
node["chef_packages]["chef"]["version"] # =&gt; "0.10.8"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/10">
<h1>Attribute Conditionals</h1>

<p>Attributes can be used to set up conditional checks using Ruby "if", "unless" and "case" statements.</p>

<p>This is commonly done to match a node's platform.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/11">
<h1>Attribute Conditionals</h1>

<pre class="sh_ruby"><code>case node["platform"]
when "debian", "ubuntu"
  package "apache2-doc" do
    action :install
  end
end

package "apache2" do
  case node["platform"]
  when "centos","redhat"
    package_name "httpd"
  end
  action :install
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/12">
<h1>platform? Method</h1>

<p>The <code>platform?</code> method will return <code>true</code> if one of the parameters
matches the <code>node["platform"]</code> attribute. The method takes a comma
separated list of platform names (lower-case).</p>

<pre class="sh_ruby"><code># on an ubuntu system:
platform?("ubuntu") # =&gt; true</code></pre>

<p>This isn't a <code>Chef::Node</code> method, but worth mentioning here as an
alternate way to check the node's platform.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/13">
<h1>Attributes in Strings</h1>

<p>Use Ruby's #{} string interpolation to embed an attribute in a
string. For example, we can set an attribute where the Apache
directory is, and write a configuration file there dynamically.</p>

<pre class="sh_ruby"><code>template "#{node["apache"]["dir"]}/ports.conf" do
  # ...
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/14">
<h1>Variables in a Template</h1>

<p>Templates can take a parameter attribute called <code>variables</code>. These
variables become available to the template. This allows us to shortcut
typing longer attributes.</p>

<p><code>variables</code> is a hash, each key must be a symbol (starting with <code>:</code>), and the value can be
anything. Here we use a node attribute:</p>

<pre class="sh_ruby"><code>template "#{node["apache"]["dir"]}/ports.conf" do
  # ...
  variables :apache_listen_ports =&gt; node["apache"]["listen_ports"]
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/15">
<h1>Variables in a Template</h1>

<p>When referring to the variables in the actual template, we must use a
class instance variable (starting with <code>@</code>).</p>

<pre><code>#This file generated via template by Chef.
&lt;% @apache_listen_ports.each do |port| -%&gt;
Listen &lt;%= port %&gt;
NameVirtualHost *:&lt;%= port %&gt;

&lt;% end -%&gt;
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/16">
<h1>Node Attributes in Templates</h1>

<p>We can also use node attributes directly.</p>

<pre><code>ServerRoot "&lt;%= node["apache"]["dir"] %&gt;"
# ...
&lt;% if node["platform"] == "debian" || node["platform"] == "ubuntu" -%&gt;
</code></pre>

<p>Node attributes used in a template can come from the cookbook itself,
or one auto detected by chef such as "platform".</p>

<p class="notes">We do <em>not</em> need to use the <code>@</code> symbol on the node.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/17">
<h1>Cookbook Attributes</h1>

<p>Node attributes can come from cookbooks.</p>

<p>Use an attributes file in a cookbook to set defaults.</p>

<p>These default values are to ensure that some value is set.</p>

<p>All the attributes files in all cookbooks on the node are loaded and
all attributes are applied to the node object.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/18">
<h1>cookbooks/apache2/attributes/default.rb</h1>

<p>Use the "default" keyword to set the attributes.</p>

<p>The node object is implied, <code>default</code> is a method of Chef::Node.</p>

<pre><code>default["apache"]["listen_ports"] = [ "80","443" ]
default["apache"]["contact"] = "ops@example.com"
default["apache"]["timeout"] = 300
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/19">
<h1>Recipe Attributes</h1>

<p>Setting attributes is the same as calling a method on the node object,
and this can also be done in a recipe.</p>

<p>Do this when you want to calculate a value for the attribute.</p>

<p>Calculated values can come from Ruby expressions, searches, external
data sources and more.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/20">
<h1>Attributes in Recipes</h1>

<p>When setting attributes in recipes, use the node.set method.</p>

<p>This allows additional overrides to be used, but has higher priority
than cookbook attributes files "default" and "set" and role
"<code>default_attributes</code>" values.</p>

<pre class="sh_ruby"><code>node.set['unicorn']['workers'] = node['cpu']['total'].to_i * 4</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/21">
<h1>Role Attributes</h1>

<p>Node attributes can be set in roles using "<code>default_attributes</code>".</p>

<p>This overrides the attributes set using "default" in the cookbook's attributes file.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/22">
<h1>roles/webserver.rb</h1>

<pre><code>name "webserver"
description "Systems that serve HTTP traffic"
run_list(
  "recipe[apache2]",
  "recipe[apache2::mod_ssl]"
)
default_attributes(
  "apache" =&gt; {
    "listen_ports" =&gt; [ 80, 443, 8080 ]
  }
)
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/23">
<h1>Node attribute? Method</h1>

<p>The <code>Chef::Node#attribute?</code> method can be used to check if the node
has a given attribute. Use it with a top-level key to find sub-keys.</p>

<pre class="sh_ruby"><code>node.attribute?("fqdn") # =&gt; true
node.attribute?("aaaaa") # =&gt; false
node['chef_packages'].attribute?("chef") # =&gt; true</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/24">
<h1>Run List</h1>

<p>The run list is an array of roles and/or recipes to apply on the node.</p>

<p>The run list is expanded during run time to determine the cookbooks to
download (by recipe name).</p>

<p>The expanded list of roles are stored in the attribute
<code>node["roles"]</code>.</p>

<p>The expanded list of recipes are stored in the attribute
<code>node["recipes"]</code>.</p>

<p>Recipes that are included via <code>include_recipe</code> method are <em>not</em> expanded.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/25">
<h1>Run List</h1>

<p>The run list is an array, which means it is ordered by numeric index
of the elements it contains.</p>

<p>The expanded run list's recipes are in the order they appear in run
list elements (node itself or in roles).</p>

<p>Recipes are applied on the node in the order specified.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/26">
<h1>Node role? method</h1>

<p>The <code>Chef::Node#role?</code> method will check if the node's run list has
the specified role.</p>

<pre class="sh_ruby"><code>node.role?("base")</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/27">
<h1>Node recipe? method</h1>

<p>Use the <code>Chef::Node#recipe?</code> method to check if the node has a given
recipe or not.</p>

<p>First, the run list is consulted for the named recipe. Second, the
node's run state is checked for recipes Chef has seen via <code>include_recipe</code>.</p>

<pre class="sh_ruby"><code>node.recipe?("webserver")</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/28">
<h1>Node Run State</h1>

<p>When Chef runs, it stores ephemeral information about the node in the
<code>run_state</code>. This is per-run data that is not persisted to the Chef
Server.</p>

<p><code>run_state</code> is a method of the node object that returns its contents.</p>

<p>An example of content in the run state is the list of recipes that
Chef has seen as they are loaded.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/29">
<h1>Chef Environment</h1>

<p>Every node has an environment. If you do not explicitly set one,
<code>_default</code> is used.</p>

<p>Chef environments allow you to set cookbook version constraints to
nodes in a particular environment, e.g. "production".</p>

<p>Retrieve the value of the node's environment with the
<code>Chef::Node#chef_environment</code> method.</p>

<pre class="sh_ruby"><code>node.chef_environment # =&gt; "_default"</code></pre>

<p>We will discuss Chef Environments later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/30">
<h1>Examining Chef::Node</h1>

<p>Use <code>knife node list</code> to list all the node objects on the Chef Server.</p>

<pre><code>&gt; knife node list
</code></pre>

<p>Use <code>knife node show</code> to display a node object on the Chef Server.</p>

<pre><code>&gt; knife node show i-2b58ad4a
Node Name:   i-2b58ad4a
Environment: _default
FQDN:        domU-12-31-39-07-D5-65.compute-1.internal
IP:          107.20.14.15
Run List:    role[base], role[webserver]
Roles:       base, webserver
Recipes:     apt, chef-client, webserver
Platform:    ubuntu 10.04
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/31">
<h1>Examining Chef::Node</h1>

<p><code>knife node show</code> has several options to modify the output of the node
object. We can show only the run list:</p>

<pre><code>&gt; knife node show i-2b58ad4a -r
run_list:
    role[base]
    role[webserver]
</code></pre>

<p>The Chef environment:</p>

<pre><code>&gt; knife node show -E i-2b58ad4a
chef_environment:  _default
</code></pre>

<p>Or a specific attribute:</p>

<pre><code>&gt; knife node show i-2b58ad4a -a ec2.public_hostname
ec2.public_hostname:  ec2-107-20-14-15.compute-1.amazonaws.com
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/32">
<h1>Examining Chef::Node</h1>

<p>The <code>Chef::Node</code> is actually a JSON object but the format returned is
a bit nicer for humans to read. Show the data in another format with
<code>-F</code> and specify a format. Valid alternate formats are JSON ("j"),
YAML ("y") or Text (default, or "t")</p>

<pre><code>&gt; knife node show i-2b58ad4a -Fj
&gt; knife node show i-2b58ad4a -r -Fj
&gt; knife node show i-2b58ad4a -a ec2 -Fj
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/33">
<h1>Examining Chef::Node in Shef</h1>

<p>We can use <code>shef</code> to examine properties of the <code>Chef::Node</code>
object. Similar to <code>chef-client</code>, <code>shef</code> loads a <code>node</code> object on
startup, including attributes from Ohai.</p>

<pre><code>&gt; shef
loading configuration: none (standalone shef session)
Session type: standalone
...
Ohai2u jtimberman@localhost.localdomain!
chef &gt;
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/34">
<h1>Chef::Node in Shef</h1>

<p>Show the <code>Chef::Node</code> object itself:</p>

<pre><code>chef &gt; node
 =&gt; &lt;Chef::Node:0xb75b9c @name="localhost.localdomain"&gt;
</code></pre>

<p>Show the node's name:</p>

<pre><code>chef &gt; node.name
 =&gt; "localhost.localdomain
</code></pre>

<p>Show the node's environment and run list:</p>

<pre><code>chef &gt; node.chef_environment
 =&gt; "_default"
chef &gt; node.run_list
 =&gt;
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/35">
<h1>Chef::Node in Shef</h1>

<p>Show some attributes about the node:</p>

<pre><code>chef &gt; node['ipaddress']
 =&gt; "10.0.0.100"
chef &gt; node['platform']
 =&gt; "ubuntu"
chef &gt; node['platform_version']
 =&gt; "11.10"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/36">
<h1>Summary</h1>

<ul>
<li>Properties of the Chef::Node object</li>
<li>Common attributes from ohai</li>
<li>Original location of node attributes</li>
<li>Node's run list</li>
<li>Methods available in recipes</li>
<li>Use <code>knife</code> and <code>shef</code> to examine nodes</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/37">
<h1>Questions</h1>

<ul>
<li>In a recipe, how do you get the node's name?</li>
<li>What are some commonly available attributes?</li>
<li>Where can attributes come from?</li>
<li>What kind of attributes should be set in a cookbook attributes file?</li>
<li>When should attributes be set from a recipe?</li>
<li>Are recipes included with <code>include_recipe</code> in the <code>node["recipes"]</code> attribute?</li>
<li>What order are recipes applied to the node by Chef?</li>
<li>What is the node's run state? Is it saved on the server?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/38">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Nodes</li>
<li>http://wiki.opscode.com/display/chef/Attributes</li>
<li>http://wiki.opscode.com/display/chef/Environments</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-node/01_slide/39">
<h1>Lab Exercise</h1>

<p>Chef Node</p>

<ul>
<li>View the node object on the Chef Server with knife</li>
<li>Create new attributes on the node with a cookbook and role.</li>
<li>Use node attributes in a conditional in the recipe.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/1">
<h1>More Cookbooks</h1>

<p>Section Objectives:</p>

<ul>
<li>Download additional cookbooks with knife</li>
<li>Apply multiple cookbooks with a role</li>
<li>Override a cookbook attribute from a role</li>
<li>Create another new cookbook</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/2">
<h1>Download Cookbooks</h1>

<p>Use knife to download additional cookbooks from the Opscode Chef
Community site.</p>

<pre><code>&gt; knife cookbook site download apt
&gt; knife cookbook site download chef-client
&gt; knife cookbook site download fail2ban
&gt; knife cookbook site download apache2
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/3">
<h1>Extract Cookbooks</h1>

<p>Knife downloads the cookbook from the community site as a <code>.tar.gz</code>
file. The file name will be the cookbook name, with the version. For
example, "<code>apache2-1.0.8.tar.gz</code>".</p>

<pre><code>&gt; knife cookbook site download apache2
Downloading apache2 from the cookbooks site at version
1.0.8 to $PWD/apache2-1.0.8.tar.gz
Cookbook saved: $PWD/apache2-1.0.8.tar.gz
&gt; tar -zxvf apache2-1.0.8.tar.gz -C cookbooks/
&gt; ls cookbooks/apache2
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/4">
<h1>Use Your VCS</h1>

<p>Knife currently integrates with Git in the "cookbook site install"
command.</p>

<p>You can use any version control system you like.</p>

<p>There will be additional steps required to untar cookbooks,
branch/merge, etc, depending on your tool.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/5">
<h1>Examine the Cookbooks</h1>

<p>Remember, you're probably going to run Chef on the nodes as a
privileged user. After extracting the cookbooks, examine their
contents to see what they're doing.</p>

<p>Most cookbooks have a README file that describe what the purpose of
the cookbook is, what it does and how to use it.</p>

<p>Chef doesn't actually execute anything on the system unless it is
in a recipe. Start by looking at the recipes that are in the
cookbooks so you know what they're going to do.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/6">
<h1>Upload cookbooks</h1>

<p>Once code has been reviewed, upload the cookbooks to the server. All
cookbooks can be uploaded at one time.</p>

<pre><code>&gt; knife cookbook upload -a
Uploading apache2                 [1.0.8]
Uploading apt                     [1.3.0]
Uploading chef-client             [1.0.4]
Uploading fail2ban                [1.0.0]
Uploading webserver               [1.0.0]
upload complete
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/7">
<h1>Recipe Ordering</h1>

<p>Recipes applied to a node are processed in the order specified.</p>

<p>Recipes are specified in a Role or Node run list.</p>

<p>Run lists are ordered lists (Ruby/JSON arrays).</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/8">
<h1>Recipe Ordering</h1>

<p>Recipes can include other recipes, too. Use "<code>include_recipe</code>".</p>

<p>Chef will process the included recipe in place, adding its resources
to the resource collection.</p>

<p>Included recipes from other cookbooks require metadata dependency.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/9">
<h1>Cookbook Dependencies</h1>

<p>Remember, cookbook dependencies are assumed when using part(s) of one
cookbook in another, such as recipe inclusion.</p>

<p>Cookbook dependencies are explicitly defined in metadata. Use the
"depends" keyword. This will cause Chef to download the dependency
cookbook from the server.</p>

<p>Downloading a cookbook as a dependency from another does not cause it
to be applied on the node. It merely makes the code/contents available
for another cookbook to use it.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/10">
<h1>Cookbook Metadata</h1>

<p>The metadata defines the additional cookbooks required that might not
appear in the run list explicitly.</p>

<p>The server reads the metadata as JSON, it does not parse the recipes
(which are Ruby).</p>

<p>This is a security feature, the Chef Server does not execute the Ruby
code.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/11">
<h1>Using Roles</h1>

<p>We typically apply multiple related recipes to a node via a role.</p>

<p>A <code>base</code> role is a great place to apply things that need to be done
for all systems.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/12">
<h1>Sample base Role</h1>

<pre class="sh_ruby"><code>name "base"
description "Base role is applied to all systems"
run_list(
  "recipe[apt]",
  "recipe[fail2ban]",
  "recipe[chef-client]"
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/13">
<h1>Order Matters</h1>

<p>We put <code>apt</code> before other cookbooks in the list to make sure the
system package cache is updated for package resources.</p>

<p>For example, the default action in the <code>fail2ban</code> package resource is
upgrade, so apt will ensure we always have the latest version
including security fixes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/14">
<h1>Apply Role to Node</h1>

<p>Applying the role to the node can be done with knife.</p>

<pre><code>&gt; knife node run list add NODE 'role[base]'
</code></pre>

<p>However, this appends the role to the end of the node's run list. To
insert it before another item, you need to edit the node directly.</p>

<pre><code>&gt; knife node edit NODE
</code></pre>

<p>The <code>$EDITOR</code> environment variable must be set, or specified with
<code>knife node edit</code>'s <code>-e</code> or <code>--editor</code> option.</p>

<pre><code>&gt; knife node edit NODE -e vi
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/15">
<h1>Apply role to Node</h1>

<pre class="sh_javascript"><code>{
  "run_list": [
    "role[base]",
    "role[webserver]"
  ]
}</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/16">
<h1>Run Chef</h1>

<p>Running Chef on the target node will cause the cookbooks in the role's
run list to be downloaded just like when only a recipe is in the
node's run list.</p>

<pre><code>&gt; sudo chef-client
INFO: *** Chef 0.10.8 ***
INFO: Run List is [role[base], role[webserver]]
INFO: Run List expands to [apt, fail2ban, chef-client, webserver]
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/17">
<h1>Common Patterns</h1>

<p>Many things automated with Chef follow a pattern:</p>

<ul>
<li>Install a software package.</li>
<li>Write configuration files.</li>
<li>Enable and start a service.</li>
</ul>

<p>Let's walk through another example of this pattern.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/18">
<h1>haproxy Cookbook</h1>

<p>Download the haproxy cookbook.</p>

<pre><code>&gt; knife cookbook site download haproxy
&gt; tar -zxvf haproxy-1.0.4.tar.gz -C cookbooks
</code></pre>

<p>We will explore the haproxy cookbook for this pattern because we'll
revisit it in the next section on search.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/19">
<h1>haproxy default recipe</h1>

<p>The default recipe follows the pattern.</p>

<pre class="sh_ruby"><code>package "haproxy"

template "/etc/default/haproxy"

service "haproxy"

template "/etc/haproxy/haproxy.cfg" do
  notifies :restart, "service[haproxy]"
end</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/20">
<h1>haproxy default recipe</h1>

<p>The haproxy software is available as a package named <code>haproxy</code> for
many platforms.</p>

<pre><code>package "haproxy" do
  action :install
end
</code></pre>

<p class="notes">On RHEL, it is available from EPEL.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/21">
<h1>haproxy default template</h1>

<p>On Debian/Ubuntu, the service is controlled by a config file
<code>/etc/default/haproxy</code>.</p>

<pre class="sh_ruby"><code>template "/etc/default/haproxy" do
  source "haproxy-default.erb"
  owner "root"
  group "root"
  mode 0644
end</code></pre>

<p class="notes">Due to this specific file, the recipe won't work on RHEL systems.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/22">
<h1>haproxy default template</h1>

<p>The <code>haproxy-default.erb</code> template came from the package, with a modification.</p>

<pre class="sh_sh"><code># Set ENABLED to 1 if you want the init script to start haproxy.
ENABLED=1
# Add extra flags here.
#EXTRAOPTS="-de -m 16"</code></pre>

<p>The haproxy init script checks the value of <code>ENABLED</code> and exits if it
is <code>0</code>.</p>

<p>If Chef tries to start the service, it would not actually
start unless this is modified, hence it must be managed by Chef.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/23">
<h1>haproxy service</h1>

<p>We will manage the haproxy service with this recipe. It will be
enabled at boot time and started if it is not running.</p>

<pre class="sh_ruby"><code>service "haproxy" do
  supports :restart =&gt; true, :status =&gt; true, :reload =&gt; true
  action [:enable, :start]
end</code></pre>

<p>The init script supports the restart, status and reload commands.</p>

<pre><code> service haproxy
 Usage: /etc/init.d/haproxy {start|stop|reload|restart|status}
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/24">
<h1>haproxy configuration template</h1>

<p>We will manage a semi-static configuration file as a template. Next
unit we will discuss a more dynamic configuration.</p>

<pre class="sh_ruby"><code>template "/etc/haproxy/haproxy.cfg" do
  source "haproxy.cfg.erb"
  owner "root"
  group "root"
  mode 0644
  notifies :restart, "service[haproxy]"
end</code></pre>

<p>We could have used the <code>:reload</code> action, since the service supports it.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/25">
<h1>haproxy configuration template</h1>

<p>The source template is in
<code>cookbooks/haproxy/templates/default/haproxy.cfg.erb</code>.</p>

<p>The default configuration file that comes with the package is not
tuned for general use and will need to be modified.</p>

<p>This is why the default file does not enable the service.</p>

<p>We ship a plain configuration template in the cookbook that you can
modify. In the next unit we'll look at an example of this kind of
modification.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/26">
<h1>haproxy configuration template</h1>

<p>The source template for the configuration file uses some attributes
set by the cookbook. Excerpts from the template:</p>

<pre><code>listen application 0.0.0.0:&lt;%= node["haproxy"]["incoming_port"] %&gt;
  balance  &lt;%= node["haproxy"]["balance_algorithm"] %&gt;

&lt;% if node["haproxy"]["enable_admin"] -%&gt;
listen admin 0.0.0.0:22002
  mode http
  stats uri /
&lt;% end -%&gt;
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/27">
<h1>haproxy attributes</h1>

<pre class="sh_ruby"><code>default['haproxy']['incoming_port'] = "80"
default['haproxy']['enable_admin'] = true
default['haproxy']['balance_algorithm'] = "roundrobin"</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/28">
<h1>haproxy modifying attributes</h1>

<p>We can modify the attributes directly editing the cookbook, or even
better, by applying them with a role appropriate to the task.</p>

<pre class="sh_ruby"><code>name "load_balancer"
description "Systems that balance the load"
run_list(
  "recipe[haproxy]"
)
default_attributes(
  "haproxy" =&gt; {
    "incoming_port" =&gt; "8080",
    "enable_admin" =&gt; false
  }
)</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/29">
<h1>Summary</h1>

<ul>
<li>Download additional cookbooks with knife</li>
<li>Apply multiple cookbooks with a role</li>
<li>Override a cookbook attribute from a role</li>
<li>Create another new cookbook</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/30">
<h1>Questions</h1>

<ul>
<li>What knife command is used to download cookbooks from the Chef
Community site?</li>
<li>What is the first thing one should do after downloading a cookbook?</li>
<li>How can all cookbooks be uploaded at one time?</li>
<li>How does Chef determine what recipes to apply on a node?</li>
<li>How does Chef determine what order to apply recipes on a node?</li>
<li>How does Chef determine what cookbooks to download?</li>
<li>Can Chef download cookbooks for a node that aren't in its run list?</li>
<li>What is a common recipe pattern used in many cookbooks?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="more-cookbooks/01_slide/31">
<h1>Lab Exercise</h1>

<p>More Cookbooks</p>

<ul>
<li>Apply apt, chef-client, and fail2ban recipes via a base role</li>
<li>Include apache2 recipe in webserver recipe</li>
<li>Download and examine the haproxy cookbook</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/1">
<h1>Multiple Nodes And Search</h1>

<p>Section Objectives:</p>

<ul>
<li>Chef search indexes</li>
<li>Search using knife</li>
<li>Search in a recipe</li>
<li>Knife bootstrap and ssh</li>
<li>Integrating systems with search</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/2">
<h1>Search</h1>

<p>The Chef Server provides a powerful full text search engine.</p>

<p>The search engine is based on Apache SOLR.</p>

<p>The search query language is modified SOLR Lucene.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/3">
<h1>Default Search Indexes</h1>

<p>Four search indexes are created on the Chef Server by default.</p>

<ul>
<li>node</li>
<li>client</li>
<li>role</li>
<li>environment</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/4">
<h1>Search Indexes</h1>

<p>When data bags are created, a search index is also created, and the
index is the same name as the bag.</p>

<p>Data Bags are covered in detail later.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/5">
<h1>Knife Search</h1>

<p>Search returns the entire object found on the server, but the output
is abbreviated.</p>

<ul>
<li>-m will display "normal" node attributes in the output.</li>
<li>-l will display all node attributes in the output.</li>
<li>-a ATTRIBUTE will display only the selected attribute.</li>
<li>-i will display only the ID of the matching items.</li>
<li>For nodes, -r will display the run list of the node.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/6">
<h1>Knife Search</h1>

<pre><code>knife search node "platform:ubuntu"
knife search node "platform:ubuntu" -r
knife search node "role:webserver"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/7">
<h1>Query Syntax</h1>

<p>Queries follow a basic pattern, with Knife:</p>

<pre><code>knife search INDEX "field:pattern"
</code></pre>

<p>In a recipe:</p>

<pre><code>search(:INDEX, "field:pattern")
</code></pre>

<p>Search patterns can be an exact match, range match or a wildcard match.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/8">
<h1>Query Syntax: Exact Match</h1>

<pre><code>knife search node "role:webserver"
knife search node "ipaddress:10.1.1.26"
knife search node "kernel_machine:x86_64"
</code></pre>

<p>Search for a node with an attribute set to a particular value.</p>

<p>Sub-key attributes (<code>node["kernel"]["machine"]</code>) are flattened with underscores.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/9">
<h1>Query Syntax: Ranges</h1>

<pre><code>knife search node "cpu_total:[4 TO 8]"
knife search node "cpu_total:{4 TO 8}"
</code></pre>

<p>Range searches are inclusive with square brackets [].</p>

<p>Range searches are exclusive with curly braces {}.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/10">
<h1>Query Syntax: Wildcards</h1>

<pre><code>knife search node "hostname:app*"
knife search node "fqdn:app1*.example.com"
knife search node "hostname:*"
knife search node "*:*"
</code></pre>

<p>Search for all nodes with hostname starting with "app".</p>

<p>Search for all nodes with fqdn that starts with app1 and ends with .example.com</p>

<p>Search for all nodes that have a hostname at all.</p>

<p>Search for all nodes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/11">
<h1>Query Syntax: Boolean</h1>

<pre><code>knife search node "(NOT cpu_total:1)"
knife search node "role:webserver AND chef_environment:production"
knife search node "cpu_total:2 OR kernel_machine:x86_64"
</code></pre>

<p>Search for all nodes except those with 1 CPU.</p>

<p>Search for all production web servers using the chef_environment.</p>

<p>Search for all nodes that have 2 CPUs or are 64bit.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/12">
<h1>Recipe Search</h1>

<p>You can run a search and retrieve the results, assigning them to a
local variable.</p>

<p>Or, you can run a search and iterate over the results dynamically.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/13">
<h1>Assign Results to Variable</h1>

<pre><code>pool = search(:node, "role:webserver")
</code></pre>

<p><code>pool</code> will be an array of the JSON representation of all the node
objects that match the search.</p>

<p>We can then use this node data in the recipe to configure resources
dynamically.</p>

<p class="notes">that the entire object is returned in the results can be a
significant use of system memory</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/14">
<h1>Assign Results to Variable</h1>

<p>Sometimes we only want specific attributes of nodes that match the
search query. As the <code>search</code> results are an array, we can generate
another array based on a specific condition using the <code>#map</code> method
(from Enumerable).</p>

<pre><code>ip_addrs = search(:node, "role:webserver").map {|n| n["ipaddress"]}
</code></pre>

<p><code>ip_addrs</code> will be an array of the <code>ipaddress</code> attribute from all the
node objects that match the search. Contrast to <code>pool</code> from before which
contained the entire node objects.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/15">
<h1>Iterating Over a Search</h1>

<p>We can iterate over the search results in real time because search
takes a block as a parameter.</p>

<pre class="sh_ruby"><code>search(:node, "role:webserver") do |match|
  puts match["ipaddress"]
end</code></pre>

<p>Provide a Ruby block to process the results directly. We could do
other things such as creating a resource for each result and pass the
data from the objects returned into the resource's paramter attributes.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/16">
<h1>Common Search Usage</h1>

<p>Search is used for a wide variety of purposes in Chef. Common uses
are:</p>

<ul>
<li>load balancers that need to pool a number of web servers.</li>
<li>application servers that need to find the master database server.</li>
<li>monitoring tools that need to find all the nodes of a particular
type for custom monitoring.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/17">
<h1>Knife Sub-commands</h1>

<p>Knife has two built in subcommands that use search.</p>

<ul>
<li>knife status</li>
<li>knife ssh</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/18">
<h1>Knife Status</h1>

<p>Knife's status subcommand performs a search and prints out information
about all the nodes, e.g.:</p>

<pre><code>&gt; knife status
1 hour ago, www1, www1.example.com, 10.1.1.20, ubuntu 10.04.
1 hour ago, www2, www2.example.com, 10.1.1.21, ubuntu 10.04.
</code></pre>

<p>By default it searches for all the nodes, but you can pass it a
query like with knife search.</p>

<pre><code>&gt; knife status "role:webserver"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/19">
<h1>Bootstrapping Chef</h1>

<p>The process of installing and initially running Chef is referred to as
"Bootstrapping Chef". The general steps are:</p>

<ul>
<li>Update the local system's package cache (OS dependent).</li>
<li>Install Ruby and RubyGems.</li>
<li>Install Chef as a RubyGem.</li>
<li>Copy the validation certificate file.</li>
<li>Create a Chef client configuration pointing at the right Chef
Server.</li>
<li>Create a JSON file with the node's initial Run List.</li>
<li>Run Chef using the JSON file.</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/20">
<h1>Installing and Running Chef</h1>

<pre class="sh_sh"><code>curl http://opscode.com/chef/installsh | sudo bash
mkdir /etc/chef
vi /etc/chef/validation.pem
vi /etc/chef/client.rb
vi /etc/chef/first-boot.json

sudo chef-client -j /etc/chef/first-boot.json</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/21">
<h1>Bootstrap Sub-command</h1>

<p>Knife bootstrap will run a single script on a target host. It uses
<code>knife ssh</code> under the covers. Instead of a query it uses a manual list.</p>

<p>Uses "bootstrap templates" by name. Several come with Chef.</p>

<p>These are typically used to install Chef on the remote system and tell
Chef to run with a particular run list.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/22">
<h1>Knife Bootstrap Templates</h1>

<p>The templates that come with Chef:</p>

<ul>
<li>archlinux-gems</li>
<li>centos5-gems</li>
<li>chef-full</li>
<li>fedora13-gems</li>
<li>ubuntu10.04-apt</li>
<li>ubuntu10.04-gems</li>
</ul>

<p>The
<a href="https://github.com/opscode/chef/raw/master/chef/lib/chef/knife/bootstrap/chef-full.erb">Default Bootstrap Template</a>
(chef-full, as of Chef 0.10.10+) will install the Chef Full Stack package that we
have been using. Other bootstrap templates are available.</p>

<p class="notes">Chef 0.10.10 may not be released yet, which means we can
retrieve the raw file directly from the internets and run it as root.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/23">
<h1>Knife Bootstrap Customization</h1>

<p>The bootstrap "templates" are really just shell scripts.</p>

<p>You can create your own bootstrap templates.</p>

<p>Use <code>-d</code> to specify the distribution style.</p>

<pre><code>./.chef/bootstrap/DISTRO.erb
$HOME/.chef/bootstrap/DISTRO.erb
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/24">
<h1>Knife Bootstrap</h1>

<pre><code>(
cat &lt;&lt;'EOP'
&lt;%= config_content %&gt;
EOP
) &gt; /etc/chef/client.rb
</code></pre>

<p>Bootstrap scripts are processed as ERB templates.</p>

<p>"<code>config_content</code>" comes from Bootstrap Context, which is a shortcut to
using the Chef Config values from Knife.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/25">
<h1>Knife Bootstrap Usage</h1>

<p>Use the <code>-d DISTRO</code> option to specify a different bootstrap template.</p>

<pre><code>knife bootstrap IPADDRESS -r 'role[webserver]' -x ubuntu -i ~/.ssh/ec2.pem

knife bootstrap IPADDRESS -r 'role[webserver]' -x ubuntu -i ~/.ssh/ec2.pem -d ubuntu10.04-mine-gems
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/26">
<h1>Integrate a New Node</h1>

<p>Integrating a new node into the infrastructure is easy with knife
bootstrap.</p>

<p>We'll add a load balancer that will sit in front of the web server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/27">
<h1>Add Load Balancer</h1>

<p>Presumably, the new system has been provisioned and has an OS
installed on it, ready to SSH and be managed with Knife Bootstrap and
Chef.</p>

<p>During the exercise, the instructor will provide a second remote
target system that will be used for the load balancer system.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/28">
<h1>Load Balancer Cookbook</h1>

<p>The load balancer will need a cookbook to install and configure the
load balancer software.</p>

<p>Haproxy is the load balancer software.</p>

<p>The cookbook is available from the Community Site.</p>

<p>A new role will be created that will be applied with the "knife
bootstrap" command.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/29">
<h1>Load Balancer Role</h1>

<pre class="sh_ruby"><code>name "lb"
description "web server load balancer"
run_list(
  "recipe[haproxy::app_lb]"
)</code></pre>

<p>The <code>haproxy::app_lb</code> recipe will perform a search for web servers.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/30">
<h1>Bootstrap Load Balancer</h1>

<pre><code>knife bootstrap IPADDRESS -r 'role[lb]' -x ubuntu --sudo
</code></pre>

<p>IPADDRESS is the IP of the target system. We can use FQDN here.</p>

<p>Default Ubuntu installs enable the "ubuntu" user to sudo.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/31">
<h1>Haproxy Uses Search</h1>

<p>The <code>app_lb</code> recipe in the haproxy cookbook uses search. The default
recipe we looked at in the last section does not.</p>

<p>Any new nodes with "<code>role[webserver]</code>" will be automatically detected by
the load balancer whenever it runs Chef.</p>

<p>The role to use is set by an attribute in the haproxy cookbook. It can
be modified via a role.</p>

<pre><code>node['haproxy']['app_server_role']
</code></pre>

<p class="notes">When growing the infrastructure, new web servers can be created
with the "webserver" role. Then run chef-client on the load balancer
node and the new servers will be automatically added to the pool for
haproxy.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/32">
<h1>Summary</h1>

<ul>
<li>Chef search indexes</li>
<li>Search using knife</li>
<li>Search in a recipe</li>
<li>Knife bootstrap and ssh</li>
<li>Integrating systems with search</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/33">
<h1>Questions</h1>

<ul>
<li>What is the search query language used by Chef?</li>
<li>What are two search indexes are created by default?</li>
<li>How can node searches display only the run list of the results?</li>
<li>What are two other knife subcommands that use search? Which is the
basis of <code>knife bootstrap</code>?</li>
<li>What tasks are performed by <code>knife bootstrap</code>?</li>
<li>How does <code>knife bootstrap</code> know what system to connect?</li>
<li>How does the haproxy cookbook load balance the web servers? What
recipe is used? How is it different from the default?</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/34">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Search</li>
<li>http://wiki.opscode.com/display/chef/Knife+Bootstrap</li>
<li>http://wiki.opscode.com/display/chef/Knife+Built+In+Subcommands</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="multiple-nodes-and-search/01_slide/35">
<h1>Lab Exercise</h1>

<p>Multiple Nodes And Search</p>

<ul>
<li>Add load balancer role with haproxy recipe</li>
<li>Bootstrap a new node with load balancer role</li>
<li>Use knife ssh to rerun chef client</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/1">
<h1>Additional Topics</h1>

<p>Section Objectives:</p>

<ul>
<li>Questions from earlier sections</li>
<li>Data bags</li>
<li>Environments</li>
<li>Lightweight Resources/Providers</li>
<li>Knife Plugins</li>
</ul>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribution Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/2">
<h1>Overview Section</h1>

<p>This section is an overview of intermediate to advanced topics.</p>

<p>The order is structured by level of general interest.</p>

<p>We will not have time to cover these in great detail. See the
<strong>Additional Resources</strong> list for more details.</p>

<p>We may not have time to cover them all entirely.</p>

<p>This section does not have a hands on exercise.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/3">
<h1>Questions</h1>

<p>Answer outstanding questions from earlier sections.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/4">
<h1>Data Bags</h1>

<p>Data bags are containers of "items" that are plain JSON data.</p>

<p>Items can contain any arbitrary key/value pairs, such as user
information, application setup parameters or DNS entries.</p>

<p>They are centrally available to recipes for processing.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/5">
<h1>Data Bags</h1>

<p>Data bags are indexed separately for search.</p>

<p>They are not tied specifically to roles or nodes.</p>

<p>Use data bags for storing information that is "infrastructure-wide".</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/6">
<h1>Creating Data Bags</h1>

<p>Data bags go in the "data_bags" directory of the chef-repo.</p>

<p>Create a directory for the bag itself.</p>

<p>Put items in JSON files in the bag's directory.</p>

<p>We do not have a Ruby DSL for Data Bag items because they are free
form and can contain anything you want.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/7">
<h1>Data Bag Use Case</h1>

<p>As data bags can contain anything, they have unlimited uses. Some
common use cases we practice or have seen:</p>

<ul>
<li>User management</li>
<li>Application information</li>
<li>Hardware inventory</li>
<li>Authentication credentials</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/8">
<h1>Encrypted Data Bags</h1>

<p>Data bags can be encrypted with a secret key.</p>

<p>The key is something you generate on your local machine and do not
send to the Chef Server.</p>

<p>You still have to distribute the key file to systems that will need
access to encrypted data bags.</p>

<p>You probably already had a key distribution problem (think SSL).</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/9">
<h1>Example: Managing Users</h1>

<pre><code>&gt; mkdir data_bags/users
&gt; touch data_bags/users/USERNAME.json
&gt; $EDITOR data_bags/users/USERNAME.json
{
  "id": "USERNAME"
  "groups": "sysadmin",
  "comment": "USERNAME",
  "uid": 2003,
  "shell": "/bin/bash",
  "ssh_keys": "ssh-rsa SSH_PUBLIC_KEY USERNAME@localhost"
}
&gt; knife data bag create users
&gt; knife data bag from file users USERNAME.json
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/10">
<h1>Search Data Bags</h1>

<p>Each bag gets a new index created.</p>

<p>Search can be done just like nodes or roles with knife or in a recipe.</p>

<pre><code>knife search BAG QUERY
search(:bag, "QUERY")
</code></pre>

<p>Encrypted data bags cannot be searched because the contents are...
encrypted.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/11">
<h1>Search Data Bags: Knife</h1>

<pre><code>&gt; knife search users "id:USERNAME"
1 items found

_rev:       6-c1c943b594f79bfae3ed043cca3a9de6
chef_type:  data_bag_item
data_bag:   users
id:         USERNAME
</code></pre>

<p>Other keys in the item besides id can be used for the QUERY.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/12">
<h1>Search Data Bags: Recipe</h1>

<pre><code>user_list = search("users", "*:*")
# or...

search("users", "*:*") do |u|
  # something with u
end
</code></pre>

<p>Query here is wildcard for all users, but this could be any query
relevant to information stored in the data bag items.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/13">
<h1>Data Bags in Recipes</h1>

<p>Besides using Search in recipes, data bags and data bag items can be loaded directly.</p>

<pre><code>data_bag()
data_bag_item()
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/14">
<h1>Environments</h1>

<p>Environments are used to enforce cookbook version constraints based on
logical infrastructure environments.</p>

<p>Different logical environments in the infrastructure may include
"production," "staging," "development" and so on.</p>

<p>Environments are assigned to nodes. They are managed as separate
entities on the Chef Server.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/15">
<h1>Cookbook Version Constraints</h1>

<p>Environments are most often used to set version constraints for
cookbooks.</p>

<p>This means that when Chef runs, it will only download the version
specified for the node's environment.</p>

<p>Version constraints can use operators to determine the version.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/16">
<h1>Version Constraint Operators</h1>

<pre><code>= Equal to
&gt; Greater than
&lt; Less than
&gt;= Greater than or equal to
&lt;= Less than or equal to
</code></pre>

<p>Advanced operators are available similar to those of RubyGems, see the
Version Constraint documentation.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/17">
<h1>Example Environment</h1>

<pre><code>name "production"
description "Systems in production"
cookbook_versions(
  "apache2" =&gt; "1.0.8",
  "mysql" = "1.0.0"
)
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/18">
<h1>Environments: Nodes</h1>

<p>The <code>Chef::Node</code> object has a method, <code>chef_environment</code> that can be
used to return the node's environment.</p>

<p>The default environment if none is assigned is <code>_default</code>. Version
constraints cannot be applied to the <code>_default</code> environment.</p>

<p>Searches can be constrained to the node's environment with a boolean
operator in the query.</p>

<pre><code>search(:node, "platform:ubuntu AND chef_environment:production")
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/19">
<h1>Environments: Configuration</h1>

<p>The node gets its environment from the <code>Chef::Config[:environment]</code>
setting.</p>

<p>This can be passed to the <code>chef-client</code> command through the <code>-E</code>
option.</p>

<p>It can be set directly in the <code>/etc/chef/client.rb</code> configuration
file.</p>

<pre><code>environment "production"
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/20">
<h1>Environments: Knife</h1>

<p>The knife <code>environment</code> sub-command can be used to work with
environments in the Chef Repository or on the Chef Server similar to
roles.</p>

<p>In the Chef Repository, environments are Ruby DSL or JSON files in the
<code>environments</code> directory.</p>

<pre><code>&gt; knife environment --help
&gt; knife environment from file production.rb
</code></pre>

<p>Similar to roles, pick your file workflow between Ruby or JSON.</p>

<p>Knife bootstrap can set the node's environment at the first Chef run
with the <code>-E</code> option.</p>

<pre><code>&gt; knife bootstrap IPADDRESS -E 'production'
</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/21">
<h1>Environments: Recipes</h1>

<p>The purpose of environments is to enforce versions of cookbooks for
particular systems. However, they can be used to constrain searches or
affect other behavior in recipes.</p>

<p>For example, search for other nodes that share <em>this</em> node's
environment:</p>

<pre class="sh_ruby"><code>search(:node, "chef_environment:#{node.chef_environment}")</code></pre>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/22">
<h1>LWRPs</h1>

<p>LWRPs are "Lightweight Resources and Providers".</p>

<p>They are custom resources and providers that go in a cookbook.</p>

<p>They introduce a new DSL that is lighter weight than the full Ruby
classes Chef uses in the core library for resources and providers.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/23">
<h1>LWRPs in a Cookbook</h1>

<p>Lightweight resources and providers are automatically loaded from the
<code>resources</code> and <code>providers</code> directories from the cookbook.</p>

<p>They are named by joining the cookbook name and the file name. For
example, the <code>apt</code> cookbook contains:</p>

<pre><code>apt/resources
-&gt; repository.rb

apt/providers
-&gt; repository.rb
</code></pre>

<p>The resource used in a recipe is <code>apt_repository</code>. If the Ruby file
name is <code>default.rb</code> then just the cookbook name is used.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/24">
<h1>When to Use LWRPs</h1>

<p>Use custom lightweight resources and providers when you want to create
a new resource that doesn't exist in Chef, or to modularize reuse of a
number of resources.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/25">
<h1>Knife Plugins</h1>

<p>Knife is a plugin-based system.</p>

<p>Plugins can be installed as RubyGems, or created in the
<code>.chef/plugins/knife</code> directory (in your home directory or in the Chef
Repository).</p>

<p>Opscode provides a number of plugins, such as interacting with
Cloud Computing providers like Amazon EC2.</p>

<ul>
<li>knife-ec2</li>
<li>knife-rackspace</li>
<li>knife-openstack</li>
<li>knife-windows</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/26">
<h1>Summary</h1>

<ul>
<li>Data bags</li>
<li>Environments</li>
<li>Lightweight Resources/Providers</li>
<li>Knife Plugins</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="additional-topics/01_slide/27">
<h1>Additional Resources</h1>

<ul>
<li>http://wiki.opscode.com/display/chef/Data+Bags</li>
<li>http://wiki.opscode.com/display/chef/Environments</li>
<li>http://wiki.opscode.com/display/chef/Version+Constraints
*
http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29</li>
<li>http://wiki.opscode.com/display/chef/Knife+Plugins</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/1">
<h1>Chef Development</h1>

<p>And Further Resources</p>

<p class="notes">These course materials are Copyright &#xA9; 2010-2012 Opscode, Inc. All rights reserved.
This work is licensed under a Creative Commons Attribute Share Alike 3.0 United States License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/3.0/us; or send a letter to Creative Commons, 171 2nd Street, Suite 300, San Francisco, California, 94105, USA.</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/2">
<h1>Chef is Open Source</h1>

<p>Chef itself is an open source project.</p>

<ul>
<li>Apache 2.0 Software License.</li>
<li>500+ individuals, 100+ companies!</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/3">
<h1>How to Contribute</h1>

<p>Sign a CLA.</p>

<ul>
<li>http://wiki.opscode.com/display/chef/How+to+Contribute</li>
</ul>

<p>Sign up on JIRA.</p>

<ul>
<li>http://tickets.opscode.com</li>
</ul>

<p>Find a ticket and start patching!</p>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/4">
<h1>Other Projects</h1>

<p>Other projects by Opscode are Apache licensed as well.</p>

<ul>
<li>ohai</li>
<li>mixlibs</li>
<li>cookbooks</li>
<li>knife plugins</li>
<li>http://github.com/opscode</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/5">
<h1>Keeping Up to Date</h1>

<p>chef and chef-dev mailing lists</p>

<ul>
<li>lists.opscode.com</li>
</ul>

<p>IRC channel</p>

<ul>
<li>irc.freenode.net #chef-hacking</li>
</ul>

<p>RSS Feeds</p>

<ul>
<li>Watch the GitHub projects</li>
<li>Subscribe to tickets RSS feeds</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/6">
<h1>Training Materials</h1>

<p>Open training materials are Creative Commons licensed and released periodically.</p>

<ul>
<li>Version 1 is from April 2010.</li>
<li>Version 2 were used but not released.</li>
<li>Version 3 is the last version in Keynote/PDF.</li>
<li>Version 4 is current, this version.</li>
</ul>

<p>Sign up on the web site for updates.</p>

<ul>
<li>http://opscode.com/opentraining</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/7">
<h1>Additional Help Resources</h1>

<p>Opscode Platform support site</p>

<ul>
<li>help.opscode.com</li>
</ul>

<p>Open source Chef wiki and documentation</p>

<ul>
<li>wiki.opscode.com</li>
</ul>

<p>Screencasts</p>

<ul>
<li>opscode.blip.tv</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/8">
<h1>Community</h1>

<p>We are working to expand our efforts in sponsoring Chef community events. Our community site will grow with new features for facilitating this and other participation.</p>

<p>Announcements of upcoming events are posted to our blog and twitter (<a href="http://twitter.com/opscode">@opscode</a>).</p>

<ul>
<li>http://community.opscode.com</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/9">
<h1>ChefConf</h1>

<p>Our first Chef users' conference is May 15-17, 2012, in Burlingame,
CA.</p>

<ul>
<li>http://chefconf.opscode.com</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/10">
<h1>Plugins and RubyGems</h1>

<p>Many other people are creating plugins and RubyGems for Chef and Knife.</p>

<pre><code>gem list -r chef-
gem list -r knife-
</code></pre>

<ul>
<li>http://wiki.opscode.com/display/chef/Community+Plugins</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/11">
<h1>Related Projects</h1>

<ul>
<li>Vagrant - http://vagrantup.com/</li>
<li>Spice - https://github.com/danryan/spice</li>
<li>PyChef - https://github.com/coderanger/pychef</li>
<li>Ruby Version Manager (RVM) - http://rvm.beginrescueend.com/</li>
<li>Rbenv - https://github.com/sstephenson/rbenv</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/12">
<h1>Related Projects</h1>

<ul>
<li>Rundeck - http://rundeck.org</li>
<li>Noah - https://github.com/lusis/Noah/wiki</li>
<li>Cucumber-chef - http://www.cucumber-chef.org/</li>
<li>Pylon - https://github.com/fujin/pylon</li>
</ul>
</div>
</div><div class="slide" data-transition="none"><div class="content" ref="chef-development/01_slide/13">
<h1>Thank you!</h1>

<p>Additional Questions?</p>
</div>
</div></div>

</body>
</html>
